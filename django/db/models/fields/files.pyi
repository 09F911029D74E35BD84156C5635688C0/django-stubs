from django.core.checks.messages import Error
from django.core.files.base import (
    ContentFile,
    File,
)
from django.core.files.storage import Storage
from django.core.files.uploadedfile import (
    InMemoryUploadedFile,
    SimpleUploadedFile,
    UploadedFile,
)
from django.db.models.base import Model
from django.forms.fields import FileField
from typing import (
    Any,
    Callable,
    Dict,
    List,
    Optional,
    Tuple,
    Union,
)


class FieldFile:
    def __eq__(self, other: Optional[Union[Tuple, str, FieldFile]]) -> bool: ...
    def __getstate__(self) -> Dict[str, Union[str, bool, None]]: ...
    def __init__(
        self,
        instance: Model,
        field: FileField,
        name: Optional[str]
    ) -> None: ...
    def _del_file(self) -> None: ...
    def _get_file(self) -> File: ...
    def _require_file(self) -> None: ...
    def _set_file(self, file: Optional[File]) -> None: ...
    def close(self) -> None: ...
    def delete(self, save: bool = ...) -> None: ...
    def open(self, mode: str = ...) -> FieldFile: ...
    def save(
        self,
        name: str,
        content: Union[ContentFile, UploadedFile],
        save: bool = ...
    ) -> None: ...
    @property
    def url(self) -> str: ...


class FileDescriptor:
    def __get__(
        self,
        instance: Any,
        cls: Any = ...
    ) -> Union[FileDescriptor, FieldFile]: ...
    def __init__(self, field: FileField) -> None: ...
    def __set__(
        self,
        instance: Model,
        value: Optional[Union[str, FieldFile, InMemoryUploadedFile]]
    ) -> None: ...


class FileField:
    def __init__(
        self,
        verbose_name: Optional[str] = ...,
        name: None = ...,
        upload_to: Union[str, Callable] = ...,
        storage: Optional[Storage] = ...,
        **kwargs
    ) -> None: ...
    def _check_primary_key(self) -> List[Error]: ...
    def _check_upload_to(self) -> List[Any]: ...
    def check(self, **kwargs) -> List[Any]: ...
    def contribute_to_class(self, cls: Any, name: str, **kwargs) -> None: ...
    def deconstruct(self) -> Any: ...
    def formfield(self, **kwargs) -> FileField: ...
    def generate_filename(self, instance: Any, filename: str) -> str: ...
    def get_internal_type(self) -> str: ...
    def get_prep_value(self, value: FieldFile) -> str: ...
    def pre_save(
        self,
        model_instance: Model,
        add: bool
    ) -> FieldFile: ...
    def save_form_data(
        self,
        instance: Model,
        data: Optional[Union[bool, FieldFile, SimpleUploadedFile]]
    ) -> None: ...