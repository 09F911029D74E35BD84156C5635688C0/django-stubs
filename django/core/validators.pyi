from datetime import datetime
from decimal import Decimal
from django.core.files.base import ContentFile
from django.utils.functional import SimpleLazyObject
from re import RegexFlag
from typing import (
    Any,
    List,
    Optional,
    Union,
)


def _lazy_re_compile(regex: str, flags: int = ...) -> SimpleLazyObject: ...


def int_list_validator(
    sep: str = ...,
    message: None = ...,
    code: str = ...,
    allow_negative: bool = ...
) -> RegexValidator: ...


def ip_address_validators(protocol: str, unpack_ipv4: bool): ...


def validate_integer(value: str) -> None: ...


def validate_ipv46_address(value: str) -> None: ...


def validate_ipv4_address(value: str) -> None: ...


def validate_ipv6_address(value: str) -> None: ...


class BaseValidator:
    def __call__(self, value: Any) -> None: ...
    def __init__(self, limit_value: Any, message: None = ...) -> None: ...
    def clean(
        self,
        x: Union[float, datetime, int, Decimal]
    ) -> Union[float, datetime, int, Decimal]: ...
    def compare(self, a: bool, b: bool) -> bool: ...


class DecimalValidator:
    def __call__(self, value: Decimal) -> None: ...
    def __eq__(self, other: DecimalValidator) -> bool: ...
    def __init__(self, max_digits: Optional[int], decimal_places: Optional[int]) -> None: ...


class EmailValidator:
    def __call__(self, value: str) -> None: ...
    def __eq__(self, other: EmailValidator) -> bool: ...
    def __init__(
        self,
        message: Optional[str] = ...,
        code: Optional[str] = ...,
        whitelist: Optional[List[str]] = ...
    ) -> None: ...
    def validate_domain_part(self, domain_part: str) -> bool: ...


class FileExtensionValidator:
    def __call__(self, value: ContentFile): ...
    def __eq__(self, other: FileExtensionValidator) -> bool: ...
    def __init__(
        self,
        allowed_extensions: Optional[List[str]] = ...,
        message: Optional[str] = ...,
        code: Optional[str] = ...
    ) -> None: ...


class MaxLengthValidator:
    def clean(self, x: str) -> int: ...
    def compare(self, a: int, b: int) -> bool: ...


class MaxValueValidator:
    def compare(self, a: Union[float, Decimal, int], b: Union[float, Decimal, int]) -> bool: ...


class MinLengthValidator:
    def clean(self, x: str) -> int: ...
    def compare(self, a: int, b: int) -> bool: ...


class MinValueValidator:
    def compare(
        self,
        a: Union[float, Decimal, int, datetime],
        b: Union[float, Decimal, int, datetime]
    ) -> bool: ...


class ProhibitNullCharactersValidator:
    def __call__(self, value: Optional[str]) -> None: ...
    def __eq__(
        self,
        other: Union[RegexValidator, ProhibitNullCharactersValidator]
    ) -> bool: ...
    def __init__(self, message: Optional[str] = ..., code: Optional[str] = ...) -> None: ...


class RegexValidator:
    def __call__(self, value: Union[str, float]) -> None: ...
    def __eq__(self, other: RegexValidator) -> bool: ...
    def __init__(
        self,
        regex: Optional[str] = ...,
        message: Optional[str] = ...,
        code: Optional[str] = ...,
        inverse_match: Optional[bool] = ...,
        flags: Optional[RegexFlag] = ...
    ) -> None: ...


class URLValidator:
    def __call__(self, value: str) -> None: ...
    def __init__(self, schemes: Optional[List[str]] = ..., **kwargs) -> None: ...