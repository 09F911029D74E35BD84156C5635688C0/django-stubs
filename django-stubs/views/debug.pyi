# Stubs for django.views.debug (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

from _frozen_importlib import FrozenImporter
from _frozen_importlib_external import SourceFileLoader
from django.core.handlers.wsgi import WSGIRequest
from django.http.request import QueryDict
from django.http.response import Http404, HttpResponseNotFound
from django.utils.safestring import SafeText
from typing import Any, Dict, List, Optional, Tuple, Type, Union

DEBUG_ENGINE: Any
HIDDEN_SETTINGS: Any
CLEANSED_SUBSTITUTE: str
CURRENT_DIR: Any

class CallableSettingWrapper:
    _wrapped: Any = ...
    def __init__(self, callable_setting: Type[object]) -> None: ...
    def __repr__(self) -> str: ...

def cleanse_setting(key: Union[str, int], value: Any) -> Any: ...
def get_safe_settings() -> Dict[str, Any]: ...
def technical_500_response(
    request: Any, exc_type: Any, exc_value: Any, tb: Any, status_code: int = ...
): ...
def get_default_exception_reporter_filter() -> SafeExceptionReporterFilter: ...
def get_exception_reporter_filter(
    request: Optional[WSGIRequest]
) -> SafeExceptionReporterFilter: ...

class ExceptionReporterFilter:
    def get_post_parameters(self, request: Any): ...
    def get_traceback_frame_variables(self, request: Any, tb_frame: Any): ...

class SafeExceptionReporterFilter(ExceptionReporterFilter):
    def is_active(self, request: Optional[WSGIRequest]) -> bool: ...
    def get_cleansed_multivaluedict(
        self, request: WSGIRequest, multivaluedict: QueryDict
    ) -> QueryDict: ...
    def get_post_parameters(self, request: Optional[WSGIRequest]) -> QueryDict: ...
    def cleanse_special_types(self, request: Optional[WSGIRequest], value: Any) -> Any: ...
    def get_traceback_frame_variables(self, request: Any, tb_frame: Any): ...

class ExceptionReporter:
    request: Any = ...
    filter: Any = ...
    exc_type: Any = ...
    exc_value: Any = ...
    tb: Any = ...
    is_email: Any = ...
    template_info: Any = ...
    template_does_not_exist: bool = ...
    postmortem: Any = ...
    def __init__(
        self,
        request: Optional[WSGIRequest],
        exc_type: None,
        exc_value: Optional[str],
        tb: None,
        is_email: bool = ...,
    ) -> None: ...
    def get_traceback_data(self) -> Dict[str, Any]: ...
    def get_traceback_html(self) -> SafeText: ...
    def get_traceback_text(self) -> SafeText: ...
    def _get_lines_from_file(
        self,
        filename: str,
        lineno: int,
        context_lines: int,
        loader: Optional[Union[SourceFileLoader, Type[FrozenImporter]]] = ...,
        module_name: str = ...,
    ) -> Union[
        Tuple[int, List[str], str, List[Any]],
        Tuple[int, List[str], str, List[str]],
        Tuple[None, List[Any], None, List[Any]],
    ]: ...
    def get_traceback_frames(self) -> List[Any]: ...

def technical_404_response(
    request: WSGIRequest, exception: Http404
) -> HttpResponseNotFound: ...
def default_urlconf(request: Any): ...
