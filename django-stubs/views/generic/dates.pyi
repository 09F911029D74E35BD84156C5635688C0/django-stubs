from datetime import date
from django.core.handlers.wsgi import WSGIRequest
from django.db.models.base import Model
from django.db.models.query import QuerySet
from django.template.response import TemplateResponse
from django.views.generic.list import MultipleObjectTemplateResponseMixin
from typing import (
    Any,
    Dict,
    Optional,
    Tuple,
    Union,
)


def _date_from_string(
    year: int,
    year_format: str,
    month: str = ...,
    month_format: str = ...,
    day: Union[str, int] = ...,
    day_format: str = ...,
    delim: str = ...
) -> date: ...


def _get_next_prev(
    generic_view: MultipleObjectTemplateResponseMixin,
    date: date,
    is_previous: bool,
    period: str
) -> Optional[date]: ...


def timezone_today() -> date: ...


class BaseArchiveIndexView:
    def get_dated_items(self) -> Tuple[QuerySet, QuerySet, Dict[Any, Any]]: ...


class BaseDateDetailView:
    def get_object(self, queryset: Optional[QuerySet] = ...) -> Model: ...


class BaseDateListView:
    def get(
        self,
        request: WSGIRequest,
        *args,
        **kwargs
    ) -> TemplateResponse: ...
    def get_date_list(
        self,
        queryset: QuerySet,
        date_type: None = ...,
        ordering: str = ...
    ) -> QuerySet: ...
    def get_date_list_period(self) -> str: ...
    def get_dated_queryset(self, **lookup) -> QuerySet: ...
    def get_ordering(self) -> Union[str, Tuple[str, str]]: ...


class BaseDayArchiveView:
    def _get_dated_items(
        self,
        date: date
    ) -> Union[Tuple[None, QuerySet, Dict[str, date]], Tuple[None, QuerySet, Dict[str, Union[date, None]]]]: ...
    def get_dated_items(
        self
    ) -> Union[Tuple[None, QuerySet, Dict[str, date]], Tuple[None, QuerySet, Dict[str, Union[date, None]]]]: ...


class BaseMonthArchiveView:
    def get_dated_items(
        self
    ) -> Union[Tuple[QuerySet, QuerySet, Dict[str, Union[date, None]]], Tuple[QuerySet, QuerySet, Dict[str, date]]]: ...


class BaseTodayArchiveView:
    def get_dated_items(self): ...


class BaseWeekArchiveView:
    def get_dated_items(self) -> Tuple[None, QuerySet, Dict[str, date]]: ...


class BaseYearArchiveView:
    def get_dated_items(
        self
    ) -> Union[Tuple[QuerySet, QuerySet, Dict[str, Union[date, None]]], Tuple[QuerySet, QuerySet, Dict[str, date]]]: ...
    def get_make_object_list(self) -> bool: ...


class DateMixin:
    def _make_date_lookup_arg(self, value: date) -> date: ...
    def _make_single_date_lookup(self, date: date) -> Dict[str, date]: ...
    def get_allow_future(self) -> bool: ...
    def get_date_field(self) -> str: ...
    @cached_property
    def uses_datetime_field(self) -> bool: ...


class DayMixin:
    def _get_current_day(self, date: date) -> date: ...
    def _get_next_day(self, date: date) -> date: ...
    def get_day(self) -> int: ...
    def get_day_format(self) -> str: ...
    def get_next_day(self, date: date) -> None: ...
    def get_previous_day(self, date: date) -> date: ...


class MonthMixin:
    def _get_current_month(self, date: date) -> date: ...
    def _get_next_month(self, date: date) -> date: ...
    def get_month(self) -> Union[str, int]: ...
    def get_month_format(self) -> str: ...
    def get_next_month(self, date: date) -> Optional[date]: ...
    def get_previous_month(self, date: date) -> Optional[date]: ...


class WeekMixin:
    def _get_current_week(self, date: date) -> date: ...
    def _get_next_week(self, date: date) -> date: ...
    def _get_weekday(self, date: date) -> int: ...
    def get_next_week(self, date: date) -> Optional[date]: ...
    def get_previous_week(self, date: date) -> Optional[date]: ...
    def get_week(self) -> int: ...
    def get_week_format(self) -> str: ...


class YearMixin:
    def _get_current_year(self, date: date) -> date: ...
    def _get_next_year(self, date: date) -> date: ...
    def get_next_year(self, date: date) -> Optional[date]: ...
    def get_previous_year(self, date: date) -> Optional[date]: ...
    def get_year(self) -> int: ...
    def get_year_format(self) -> str: ...