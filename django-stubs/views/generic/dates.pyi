# Stubs for django.views.generic.dates (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.views.generic.base import View
from django.views.generic.detail import BaseDetailView, SingleObjectTemplateResponseMixin
from django.views.generic.list import (
    MultipleObjectMixin,
    MultipleObjectTemplateResponseMixin,
)
from typing import Any, Optional

from datetime import date
from django.core.handlers.wsgi import WSGIRequest
from django.db.models.base import Model
from django.db.models.query import QuerySet
from django.template.response import TemplateResponse
from typing import Any, Dict, Optional, Tuple, Union

class YearMixin:
    year_format: str = ...
    year: Any = ...
    def get_year_format(self) -> str: ...
    def get_year(self) -> int: ...
    def get_next_year(self, date: date) -> Optional[date]: ...
    def get_previous_year(self, date: date) -> Optional[date]: ...
    def _get_next_year(self, date: date) -> date: ...
    def _get_current_year(self, date: date) -> date: ...

class MonthMixin:
    month_format: str = ...
    month: Any = ...
    def get_month_format(self) -> str: ...
    def get_month(self) -> Union[str, int]: ...
    def get_next_month(self, date: date) -> Optional[date]: ...
    def get_previous_month(self, date: date) -> Optional[date]: ...
    def _get_next_month(self, date: date) -> date: ...
    def _get_current_month(self, date: date) -> date: ...

class DayMixin:
    day_format: str = ...
    day: Any = ...
    def get_day_format(self) -> str: ...
    def get_day(self) -> int: ...
    def get_next_day(self, date: date) -> None: ...
    def get_previous_day(self, date: date) -> date: ...
    def _get_next_day(self, date: date) -> date: ...
    def _get_current_day(self, date: date) -> date: ...

class WeekMixin:
    week_format: str = ...
    week: Any = ...
    def get_week_format(self) -> str: ...
    def get_week(self) -> int: ...
    def get_next_week(self, date: date) -> Optional[date]: ...
    def get_previous_week(self, date: date) -> Optional[date]: ...
    def _get_next_week(self, date: date) -> date: ...
    def _get_current_week(self, date: date) -> date: ...
    def _get_weekday(self, date: date) -> int: ...

class DateMixin:
    date_field: Any = ...
    allow_future: bool = ...
    def get_date_field(self) -> str: ...
    def get_allow_future(self) -> bool: ...
    def uses_datetime_field(self) -> bool: ...
    def _make_date_lookup_arg(self, value: date) -> date: ...
    def _make_single_date_lookup(self, date: date) -> Dict[str, date]: ...

class BaseDateListView(MultipleObjectMixin, DateMixin, View):
    allow_empty: bool = ...
    date_list_period: str = ...
    def get(self, request: WSGIRequest, *args: Any, **kwargs: Any) -> TemplateResponse: ...
    def get_dated_items(self) -> None: ...
    def get_ordering(self) -> Union[str, Tuple[str, str]]: ...
    def get_dated_queryset(self, **lookup: Any) -> QuerySet: ...
    def get_date_list_period(self) -> str: ...
    def get_date_list(
        self, queryset: QuerySet, date_type: None = ..., ordering: str = ...
    ) -> QuerySet: ...

class BaseArchiveIndexView(BaseDateListView):
    context_object_name: str = ...
    def get_dated_items(self) -> Tuple[QuerySet, QuerySet, Dict[Any, Any]]: ...

class ArchiveIndexView(MultipleObjectTemplateResponseMixin, BaseArchiveIndexView):
    template_name_suffix: str = ...

class BaseYearArchiveView(YearMixin, BaseDateListView):
    date_list_period: str = ...
    make_object_list: bool = ...
    def get_dated_items(
        self
    ) -> Union[
        Tuple[QuerySet, QuerySet, Dict[str, Union[date, None]]],
        Tuple[QuerySet, QuerySet, Dict[str, date]],
    ]: ...
    def get_make_object_list(self) -> bool: ...

class YearArchiveView(MultipleObjectTemplateResponseMixin, BaseYearArchiveView):
    template_name_suffix: str = ...

class BaseMonthArchiveView(YearMixin, MonthMixin, BaseDateListView):
    date_list_period: str = ...
    def get_dated_items(
        self
    ) -> Union[
        Tuple[QuerySet, QuerySet, Dict[str, Union[date, None]]],
        Tuple[QuerySet, QuerySet, Dict[str, date]],
    ]: ...

class MonthArchiveView(MultipleObjectTemplateResponseMixin, BaseMonthArchiveView):
    template_name_suffix: str = ...

class BaseWeekArchiveView(YearMixin, WeekMixin, BaseDateListView):
    def get_dated_items(self) -> Tuple[None, QuerySet, Dict[str, date]]: ...

class WeekArchiveView(MultipleObjectTemplateResponseMixin, BaseWeekArchiveView):
    template_name_suffix: str = ...

class BaseDayArchiveView(YearMixin, MonthMixin, DayMixin, BaseDateListView):
    def get_dated_items(
        self
    ) -> Union[
        Tuple[None, QuerySet, Dict[str, date]],
        Tuple[None, QuerySet, Dict[str, Union[date, None]]],
    ]: ...
    def _get_dated_items(
        self, date: date
    ) -> Union[
        Tuple[None, QuerySet, Dict[str, date]],
        Tuple[None, QuerySet, Dict[str, Union[date, None]]],
    ]: ...

class DayArchiveView(MultipleObjectTemplateResponseMixin, BaseDayArchiveView):
    template_name_suffix: str = ...

class BaseTodayArchiveView(BaseDayArchiveView):
    def get_dated_items(self): ...

class TodayArchiveView(MultipleObjectTemplateResponseMixin, BaseTodayArchiveView):
    template_name_suffix: str = ...

class BaseDateDetailView(YearMixin, MonthMixin, DayMixin, DateMixin, BaseDetailView):
    def get_object(self, queryset: Optional[QuerySet] = ...) -> Model: ...

class DateDetailView(SingleObjectTemplateResponseMixin, BaseDateDetailView):
    template_name_suffix: str = ...

def _date_from_string(
    year: int,
    year_format: str,
    month: str = ...,
    month_format: str = ...,
    day: Union[str, int] = ...,
    day_format: str = ...,
    delim: str = ...,
) -> date: ...
def _get_next_prev(
    generic_view: MultipleObjectTemplateResponseMixin,
    date: date,
    is_previous: bool,
    period: str,
) -> Optional[date]: ...
def timezone_today() -> date: ...
