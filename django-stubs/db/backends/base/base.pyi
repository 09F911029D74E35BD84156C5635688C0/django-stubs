from django.db.backends.sqlite3.base import (
    DatabaseWrapper,
    SQLiteCursorWrapper,
)
from django.db.backends.sqlite3.schema import DatabaseSchemaEditor
from django.db.backends.utils import (
    CursorDebugWrapper,
    CursorWrapper,
)
from django.db.utils import DatabaseErrorWrapper
from typing import (
    Any,
    Callable,
    Dict,
    Iterator,
    List,
)
from unittest.mock import MagicMock


class BaseDatabaseWrapper:
    def __init__(
        self,
        settings_dict: Dict[str, Any],
        alias: str = ...,
        allow_thread_sharing: bool = ...
    ) -> None: ...
    def _commit(self): ...
    def _cursor(self, name: None = ...): ...
    def _prepare_cursor(
        self,
        cursor: SQLiteCursorWrapper
    ) -> CursorWrapper: ...
    def _rollback(self): ...
    def _savepoint(self, sid: str) -> None: ...
    def _savepoint_commit(self, sid: str) -> None: ...
    def _savepoint_rollback(self, sid: str) -> None: ...
    def check_settings(self) -> None: ...
    def chunked_cursor(self) -> CursorWrapper: ...
    def close(self) -> None: ...
    def close_if_unusable_or_obsolete(self) -> None: ...
    def commit(self) -> None: ...
    def connect(self) -> None: ...
    def constraint_checks_disabled(self) -> Iterator[None]: ...
    def copy(
        self,
        alias: None = ...,
        allow_thread_sharing: None = ...
    ) -> DatabaseWrapper: ...
    def cursor(self) -> CursorWrapper: ...
    def ensure_connection(self) -> None: ...
    def ensure_timezone(self) -> bool: ...
    def execute_wrapper(self, wrapper: MagicMock) -> Iterator[None]: ...
    def get_autocommit(self) -> bool: ...
    def get_rollback(self) -> bool: ...
    def make_cursor(
        self,
        cursor: SQLiteCursorWrapper
    ) -> CursorWrapper: ...
    def make_debug_cursor(
        self,
        cursor: SQLiteCursorWrapper
    ) -> CursorDebugWrapper: ...
    def on_commit(self, func: Callable) -> None: ...
    def prepare_database(self) -> None: ...
    @property
    def queries(self) -> List[Dict[str, str]]: ...
    @property
    def queries_logged(self) -> bool: ...
    def rollback(self) -> None: ...
    def run_and_clear_commit_hooks(self) -> None: ...
    def savepoint(self) -> str: ...
    def savepoint_commit(self, sid: str) -> None: ...
    def savepoint_rollback(self, sid: str) -> None: ...
    def schema_editor(self, *args, **kwargs) -> DatabaseSchemaEditor: ...
    def set_autocommit(self, autocommit: bool, force_begin_transaction_with_broken_autocommit: bool = ...) -> None: ...
    def set_rollback(self, rollback: bool) -> None: ...
    def validate_no_atomic_block(self) -> None: ...
    def validate_no_broken_transaction(self) -> None: ...
    def validate_thread_sharing(self) -> None: ...
    @cached_property
    def wrap_database_errors(self) -> DatabaseErrorWrapper: ...