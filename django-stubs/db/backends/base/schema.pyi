# Stubs for django.db.backends.base.schema (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

from django.db.backends.ddl_references import Statement
from django.db.backends.sqlite3.base import DatabaseWrapper
from django.db.backends.sqlite3.schema import DatabaseSchemaEditor
from django.db.models.base import Model
from django.db.models.fields import Field
from typing import Any, Dict, List, Optional, Tuple, Type, Union

logger: Any

def _is_relevant_relation(relation: Any, altered_field: Any): ...
def _related_non_m2m_objects(old_field: Any, new_field: Any): ...

class BaseDatabaseSchemaEditor:
    sql_create_table: str = ...
    sql_rename_table: str = ...
    sql_retablespace_table: str = ...
    sql_delete_table: str = ...
    sql_create_column: str = ...
    sql_alter_column: str = ...
    sql_alter_column_type: str = ...
    sql_alter_column_null: str = ...
    sql_alter_column_not_null: str = ...
    sql_alter_column_default: str = ...
    sql_alter_column_no_default: str = ...
    sql_delete_column: str = ...
    sql_rename_column: str = ...
    sql_update_with_default: str = ...
    sql_create_check: str = ...
    sql_delete_check: str = ...
    sql_create_unique: str = ...
    sql_delete_unique: str = ...
    sql_create_fk: str = ...
    sql_create_inline_fk: Any = ...
    sql_delete_fk: str = ...
    sql_create_index: str = ...
    sql_delete_index: str = ...
    sql_create_pk: str = ...
    sql_delete_pk: str = ...
    sql_delete_procedure: str = ...
    connection: Any = ...
    collect_sql: Any = ...
    collected_sql: Any = ...
    atomic_migration: Any = ...
    def __init__(
        self, connection: DatabaseWrapper, collect_sql: bool = ..., atomic: bool = ...
    ) -> None: ...
    deferred_sql: Any = ...
    atomic: Any = ...
    def __enter__(self) -> DatabaseSchemaEditor: ...
    def __exit__(self, exc_type: None, exc_value: None, traceback: None) -> None: ...
    def execute(self, sql: Any, params: Any = ...) -> None: ...
    def quote_name(self, name: Any): ...
    @classmethod
    def _digest(cls, *args: Any) -> str: ...
    def column_sql(self, model: Any, field: Any, include_default: bool = ...): ...
    def skip_default(self, field: Any): ...
    def prepare_default(self, value: Any) -> None: ...
    def effective_default(self, field: Any): ...
    def quote_value(self, value: Any) -> None: ...
    def create_model(self, model: Any) -> None: ...
    def delete_model(self, model: Any) -> None: ...
    def add_index(self, model: Any, index: Any) -> None: ...
    def remove_index(self, model: Any, index: Any) -> None: ...
    def alter_unique_together(
        self, model: Any, old_unique_together: Any, new_unique_together: Any
    ) -> None: ...
    def alter_index_together(
        self, model: Any, old_index_together: Any, new_index_together: Any
    ) -> None: ...
    def _delete_composed_index(
        self,
        model: Type[Model],
        fields: Tuple[str, str],
        constraint_kwargs: Dict[str, bool],
        sql: str,
    ) -> None: ...
    def alter_db_table(self, model: Any, old_db_table: Any, new_db_table: Any): ...
    def alter_db_tablespace(
        self, model: Any, old_db_tablespace: Any, new_db_tablespace: Any
    ) -> None: ...
    def add_field(self, model: Any, field: Any): ...
    def remove_field(self, model: Any, field: Any): ...
    def alter_field(
        self, model: Any, old_field: Any, new_field: Any, strict: bool = ...
    ): ...
    def _alter_field(
        self,
        model: Any,
        old_field: Any,
        new_field: Any,
        old_type: Any,
        new_type: Any,
        old_db_params: Any,
        new_db_params: Any,
        strict: bool = ...,
    ) -> None: ...
    def _alter_column_null_sql(self, model: Any, old_field: Any, new_field: Any): ...
    def _alter_column_default_sql(
        self, model: Any, old_field: Any, new_field: Any, drop: bool = ...
    ): ...
    def _alter_column_type_sql(
        self, model: Any, old_field: Any, new_field: Any, new_type: Any
    ): ...
    def _alter_many_to_many(
        self, model: Any, old_field: Any, new_field: Any, strict: Any
    ) -> None: ...
    def _create_index_name(
        self,
        table_name: str,
        column_names: Union[Tuple[str, str, str], List[str], Tuple[str]],
        suffix: str = ...,
    ) -> str: ...
    def _get_index_tablespace_sql(
        self, model: Any, fields: Any, db_tablespace: Optional[Any] = ...
    ): ...
    def _create_index_sql(
        self,
        model: Type[Model],
        fields: Any,
        *,
        name: Optional[Any] = ...,
        suffix: str = ...,
        using: str = ...,
        db_tablespace: Optional[Any] = ...,
        col_suffixes: Any = ...,
        sql: Optional[Any] = ...,
    ) -> Statement: ...
    def _model_indexes_sql(self, model: Any): ...
    def _field_indexes_sql(self, model: Type[Model], field: Field) -> List[Statement]: ...
    def _field_should_be_indexed(self, model: Any, field: Any): ...
    def _field_became_primary_key(self, old_field: Any, new_field: Any): ...
    def _unique_should_be_added(self, old_field: Any, new_field: Any): ...
    def _rename_field_sql(
        self, table: Any, old_field: Any, new_field: Any, new_type: Any
    ): ...
    def _create_fk_sql(self, model: Any, field: Any, suffix: Any): ...
    def _create_unique_sql(self, model: Type[Model], columns: List[str]) -> Statement: ...
    def _delete_constraint_sql(self, template: Any, model: Any, name: Any): ...
    def _constraint_names(
        self,
        model: Type[Model],
        column_names: List[str] = ...,
        unique: Optional[bool] = ...,
        primary_key: None = ...,
        index: Optional[bool] = ...,
        foreign_key: None = ...,
        check: None = ...,
        type_: None = ...,
    ) -> List[str]: ...
    def _delete_primary_key(self, model: Any, strict: bool = ...) -> None: ...
    def remove_procedure(self, procedure_name: Any, param_types: Any = ...) -> None: ...
