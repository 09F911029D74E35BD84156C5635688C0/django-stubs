# Stubs for django.db.models.base (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

from typing import Any, Dict, List
class Deferred:
    def __repr__(self): ...
    def __str__(self): ...

DEFERRED: Any

def subclass_exception(name: Any, bases: Any, module: Any, attached_to: Any): ...

class ModelBase(type):
    def __new__(cls, name: Any, bases: Any, attrs: Any, **kwargs: Any): ...
    def add_to_class(cls, name: Any, value: Any) -> None: ...
    def _prepare(cls) -> None: ...
    @property
    def _base_manager(cls): ...
    @property
    def _default_manager(cls): ...

class ModelStateFieldsCacheDescriptor:
    def __get__(self, instance: Any, cls: Optional[Any] = ...): ...

class ModelState:
    db: Any = ...
    adding: bool = ...
    fields_cache: Any = ...

class Model:
    _state: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def from_db(cls, db: Any, field_names: Any, values: Any): ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __reduce__(self) -> Any: ...
    def __getstate__(self) -> Dict[str, Any]: ...
    def __setstate__(self, state: Dict[str, Any]) -> None: ...
    def _get_pk_val(self, meta: Optional[Any] = ...): ...
    def _set_pk_val(self, value: Any): ...
    pk: Any = ...
    def get_deferred_fields(self): ...
    def refresh_from_db(self, using: Optional[Any] = ..., fields: Optional[Any] = ...): ...
    def serializable_value(self, field_name: Any): ...
    def save(self, force_insert: bool = ..., force_update: bool = ..., using: Optional[Any] = ..., update_fields: Optional[Any] = ...): ...
    def save_base(self, raw: bool = ..., force_insert: bool = ..., force_update: bool = ..., using: Optional[Any] = ..., update_fields: Optional[Any] = ...) -> None: ...
    def _save_parents(self, cls: Any, using: Any, update_fields: Any) -> None: ...
    _order: Any = ...
    def _save_table(self, raw: bool = ..., cls: Optional[Any] = ..., force_insert: bool = ..., force_update: bool = ..., using: Optional[Any] = ..., update_fields: Optional[Any] = ...): ...
    def _do_update(self, base_qs: Any, using: Any, pk_val: Any, values: Any, update_fields: Any, forced_update: Any): ...
    def _do_insert(self, manager: Any, using: Any, fields: Any, update_pk: Any, raw: Any): ...
    def delete(self, using: Optional[Any] = ..., keep_parents: bool = ...): ...
    def _get_FIELD_display(self, field: Any): ...
    def _get_next_or_previous_by_FIELD(self, field: Any, is_next: Any, **kwargs: Any): ...
    def _get_next_or_previous_in_order(self, is_next: Any): ...
    def prepare_database_save(self, field: Any): ...
    def clean(self) -> None: ...
    def validate_unique(self, exclude: Optional[Any] = ...) -> None: ...
    def _get_unique_checks(self, exclude: Optional[Any] = ...): ...
    def _perform_unique_checks(self, unique_checks: Any): ...
    def _perform_date_checks(self, date_checks: Any): ...
    def date_error_message(self, lookup_type: Any, field_name: Any, unique_for: Any): ...
    def unique_error_message(self, model_class: Any, unique_check: Any): ...
    def full_clean(self, exclude: Optional[Any] = ..., validate_unique: bool = ...) -> None: ...
    def clean_fields(self, exclude: Optional[Any] = ...) -> None: ...
    @classmethod
    def check(cls, **kwargs: Any): ...
    @classmethod
    def _check_swappable(cls): ...
    @classmethod
    def _check_model(cls): ...
    @classmethod
    def _check_managers(cls, **kwargs: Any): ...
    @classmethod
    def _check_fields(cls, **kwargs: Any): ...
    @classmethod
    def _check_m2m_through_same_relationship(cls): ...
    @classmethod
    def _check_id_field(cls): ...
    @classmethod
    def _check_field_name_clashes(cls): ...
    @classmethod
    def _check_column_name_clashes(cls) -> List[Any]: ...
    @classmethod
    def _check_model_name_db_lookup_clashes(cls): ...
    @classmethod
    def _check_property_name_related_field_accessor_clashes(cls): ...
    @classmethod
    def _check_single_primary_key(cls): ...
    @classmethod
    def _check_index_together(cls): ...
    @classmethod
    def _check_unique_together(cls): ...
    @classmethod
    def _check_indexes(cls): ...
    @classmethod
    def _check_local_fields(cls, fields: Any, option: Any): ...
    @classmethod
    def _check_ordering(cls): ...
    @classmethod
    def _check_long_column_names(cls): ...

def method_set_order(self, ordered_obj: Any, id_list: Any, using: Optional[Any] = ...) -> None: ...
def method_get_order(self, ordered_obj: Any): ...
def make_foreign_order_accessors(model: Any, related_model: Any) -> None: ...
def model_unpickle(model_id: Any): ...
