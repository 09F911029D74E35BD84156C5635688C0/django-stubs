from typing import Any, Dict, Optional, Tuple, Type, Union

from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist


class Deferred: ...

DEFERRED: Any

def subclass_exception(
    name: str,
    bases: Tuple[Type[Union[ObjectDoesNotExist, MultipleObjectsReturned]]],
    module: str,
    attached_to: Type[Model],
) -> Type[Union[ObjectDoesNotExist, MultipleObjectsReturned]]: ...

class ModelBase(type):
    def __new__(
        cls: Type[ModelBase],
        name: str,
        bases: Tuple[Type[Model]],
        attrs: Dict[str, Any],
        **kwargs: Any
    ) -> Type[Model]: ...
    def add_to_class(cls, name: str, value: Any) -> None: ...

class ModelStateFieldsCacheDescriptor:
    def __get__(self, instance: Any, cls: Optional[Any] = ...): ...

class ModelState:
    db: Any = ...
    adding: bool = ...
    fields_cache: Any = ...

class Model:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def from_db(cls, db: Any, field_names: Any, values: Any): ...
    def __eq__(self, other: Any): ...
    def __hash__(self): ...
    def __reduce__(self): ...
    pk: Any = ...
    def get_deferred_fields(self): ...
    def refresh_from_db(
        self, using: Optional[Any] = ..., fields: Optional[Any] = ...
    ): ...
    def serializable_value(self, field_name: Any): ...
    def save(
        self,
        force_insert: bool = ...,
        force_update: bool = ...,
        using: Optional[Any] = ...,
        update_fields: Optional[Any] = ...,
    ): ...
    def save_base(
        self,
        raw: bool = ...,
        force_insert: bool = ...,
        force_update: bool = ...,
        using: Optional[Any] = ...,
        update_fields: Optional[Any] = ...,
    ) -> None: ...
    def delete(self, using: Optional[Any] = ..., keep_parents: bool = ...): ...
    def prepare_database_save(self, field: Any): ...
    def clean(self) -> None: ...
    def validate_unique(self, exclude: Optional[Any] = ...) -> None: ...
    def date_error_message(
        self, lookup_type: Any, field_name: Any, unique_for: Any
    ): ...
    def unique_error_message(self, model_class: Any, unique_check: Any): ...
    def full_clean(
        self, exclude: Optional[Any] = ..., validate_unique: bool = ...
    ) -> None: ...
    def clean_fields(self, exclude: Optional[Any] = ...) -> None: ...
    @classmethod
    def check(cls, **kwargs: Any): ...

def method_set_order(
    self, ordered_obj: Any, id_list: Any, using: Optional[Any] = ...
) -> None: ...
def method_get_order(self, ordered_obj: Any): ...
def make_foreign_order_accessors(model: Any, related_model: Any) -> None: ...
def model_unpickle(model_id: Any): ...
