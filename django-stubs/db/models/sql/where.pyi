# Stubs for django.db.models.sql.where (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.utils import tree
from typing import Any, Optional

from collections import OrderedDict
from django.db import DefaultConnectionProxy
from django.db.backends.sqlite3.base import DatabaseWrapper
from django.db.models.expressions import Col, CombinedExpression
from django.db.models.lookups import (
    Exact,
    FieldGetDbPrepValueMixin,
    GreaterThan,
    IntegerLessThan,
    LessThanOrEqual,
)
from django.db.models.sql.compiler import SQLCompiler
from django.db.models.sql.query import Query
from typing import Any, Dict, List, Optional, Tuple, Union

AND: str
OR: str

class WhereNode(tree.Node):
    default: Any = ...
    resolved: bool = ...
    conditional: bool = ...
    def split_having(
        self, negated: bool = ...
    ) -> Union[
        Tuple[None, WhereNode], Tuple[WhereNode, WhereNode], Tuple[WhereNode, None]
    ]: ...
    def as_sql(
        self,
        compiler: object,
        connection: Union[DefaultConnectionProxy, backends.sqlite3.base.DatabaseWrapper],
    ) -> Any: ...
    def get_group_by_cols(self) -> Union[List[CombinedExpression], List[Col]]: ...
    def get_source_expressions(
        self
    ) -> Union[
        List[GreaterThan], List[LessThanOrEqual], List[Exact], List[IntegerLessThan]
    ]: ...
    children: Any = ...
    def set_source_expressions(
        self, children: Union[List[GreaterThan], List[IntegerLessThan], List[Exact]]
    ) -> None: ...
    def relabel_aliases(
        self, change_map: Union[OrderedDict, Dict[str, str], Dict[Union[str, None], str]]
    ) -> None: ...
    def clone(self) -> WhereNode: ...
    def relabeled_clone(
        self, change_map: Union[OrderedDict, Dict[Union[str, None], str]]
    ) -> WhereNode: ...
    @classmethod
    def _contains_aggregate(cls, obj: Any) -> bool: ...
    def contains_aggregate(self) -> bool: ...
    @classmethod
    def _contains_over_clause(
        cls, obj: Union[WhereNode, FieldGetDbPrepValueMixin]
    ) -> bool: ...
    def contains_over_clause(self) -> bool: ...
    @property
    def is_summary(self): ...
    def resolve_expression(self, *args: Any, **kwargs: Any) -> WhereNode: ...

class NothingNode:
    contains_aggregate: bool = ...
    def as_sql(
        self,
        compiler: object = ...,
        connection: Union[
            DefaultConnectionProxy, backends.sqlite3.base.DatabaseWrapper
        ] = ...,
    ) -> None: ...

class ExtraWhere:
    contains_aggregate: bool = ...
    sqls: Any = ...
    params: Any = ...
    def __init__(self, sqls: List[str], params: Optional[List[int]]) -> None: ...
    def as_sql(
        self, compiler: SQLCompiler = ..., connection: DatabaseWrapper = ...
    ) -> Union[Tuple[str, List[int]], Tuple[str, List[Any]]]: ...

class SubqueryConstraint:
    contains_aggregate: bool = ...
    alias: Any = ...
    columns: Any = ...
    targets: Any = ...
    query_object: Any = ...
    def __init__(
        self, alias: str, columns: List[str], targets: List[str], query_object: Query
    ) -> None: ...
    def as_sql(
        self, compiler: SQLCompiler, connection: DatabaseWrapper
    ) -> Tuple[str, Tuple]: ...
