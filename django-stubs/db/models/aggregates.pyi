# Stubs for django.db.models.aggregates (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.db.models.expressions import Func
from typing import Any, Optional

from django.db.backends.sqlite3.base import DatabaseWrapper
from django.db.models.fields import Field
from django.db.models.query_utils import Q
from django.db.models.sql.compiler import SQLCompiler
from django.db.models.sql.query import Query
from typing import Any, Dict, List, Optional
class Aggregate(Func):
    contains_aggregate: bool = ...
    name: Any = ...
    filter_template: str = ...
    window_compatible: bool = ...
    filter: Any = ...
    def __init__(self, *args: Any, filter: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def get_source_fields(self) -> Any: ...
    def get_source_expressions(self) -> Any: ...
    def set_source_expressions(self, exprs: Any) -> None: ...
    def resolve_expression(self, query: Query = ..., allow_joins: bool = ..., reuse: None = ..., summarize: bool = ..., for_save: bool = ...) -> Aggregate: ...
    @property
    def default_alias(self) -> str: ...
    def get_group_by_cols(self) -> List[Any]: ...
    def as_sql(self, compiler: SQLCompiler, connection: DatabaseWrapper, **extra_context: Any) -> Any: ...
    def _get_repr_options(self) -> Dict[str, Q]: ...

class Avg(Aggregate):
    function: str = ...
    name: str = ...
    def _resolve_output_field(self) -> Field: ...
    def as_mysql(self, compiler: Any, connection: Any): ...
    def as_oracle(self, compiler: Any, connection: Any): ...

class Count(Aggregate):
    function: str = ...
    name: str = ...
    template: str = ...
    output_field: Any = ...
    def __init__(self, expression: str, distinct: bool = ..., filter: Optional[Q] = ..., **extra: Any) -> None: ...
    def _get_repr_options(self) -> Dict[str, bool]: ...
    def convert_value(self, value: Optional[int], expression: Count, connection: DatabaseWrapper) -> int: ...

class Max(Aggregate):
    function: str = ...
    name: str = ...

class Min(Aggregate):
    function: str = ...
    name: str = ...

class StdDev(Aggregate):
    name: str = ...
    output_field: Any = ...
    function: Any = ...
    def __init__(self, expression: str, sample: bool = ..., **extra: Any) -> None: ...
    def _get_repr_options(self): ...

class Sum(Aggregate):
    function: str = ...
    name: str = ...
    def as_mysql(self, compiler: Any, connection: Any): ...
    def as_oracle(self, compiler: Any, connection: Any): ...

class Variance(Aggregate):
    name: str = ...
    output_field: Any = ...
    function: Any = ...
    def __init__(self, expression: str, sample: bool = ..., **extra: Any) -> None: ...
    def _get_repr_options(self) -> Dict[str, bool]: ...
