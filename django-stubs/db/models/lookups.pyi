from collections import OrderedDict
from typing import Any, Dict, List, Optional, Tuple, Union

from django.db.models.expressions import Expression
from django.db.models.fields import TextField
from django.db.models.sql.compiler import SQLCompiler
from django.utils.datastructures import OrderedSet
from django.utils.safestring import SafeText


class Lookup:
    lookup_name: Any = ...
    prepare_rhs: bool = ...
    can_use_none_as_rhs: bool = ...
    lhs: Any = ...
    rhs: Any = ...
    bilateral_transforms: Any = ...

    def __init__(
            self,
            lhs: Union[Expression, TextField],
            rhs: Any,
    ) -> None: ...

    def apply_bilateral_transforms(self, value: Expression) -> Expression: ...

    def batch_process_rhs(
            self,
            compiler: SQLCompiler,
            connection: Any,
            rhs: Optional[OrderedSet] = ...,
    ) -> Tuple[List[str], List[str]]: ...

    def get_source_expressions(self) -> List[Expression]: ...

    def set_source_expressions(self, new_exprs: List[Expression]) -> None: ...

    def get_prep_lookup(self) -> Any: ...

    def get_db_prep_lookup(
            self, value: Union[int, str], connection: Any
    ) -> Tuple[str, List[SafeText]]: ...

    def process_lhs(
            self,
            compiler: SQLCompiler,
            connection: Any,
            lhs: Optional[Expression] = ...,
    ) -> Tuple[str, List[Union[int, str]]]: ...

    def process_rhs(
            self, compiler: SQLCompiler, connection: Any
    ) -> Tuple[str, Union[List[Union[int, str]], Tuple[int, int]]]: ...

    def rhs_is_direct_value(self) -> bool: ...

    def relabeled_clone(
            self, relabels: Union[Dict[Optional[str], str], OrderedDict]
    ) -> Lookup: ...

    def get_group_by_cols(self) -> List[Expression]: ...

    def as_sql(self, compiler: Any, connection: Any) -> None: ...

    def contains_aggregate(self) -> bool: ...

    def contains_over_clause(self) -> bool: ...

    @property
    def is_summary(self): ...
