# Stubs for django.db.models.fields.files (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.core.files.base import File
from django.core.files.images import ImageFile
from django.db.models.fields import Field
from typing import Any, Optional

from django.core.checks.messages import Error
from django.core.files.base import ContentFile, File
from django.core.files.storage import Storage
from django.core.files.uploadedfile import (
    InMemoryUploadedFile,
    SimpleUploadedFile,
    UploadedFile,
)
from django.db.models.base import Model
from django.forms.fields import FileField
from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union

class FieldFile(File):
    instance: Any = ...
    field: Any = ...
    storage: Any = ...
    _committed: bool = ...
    def __init__(self, instance: Model, field: FileField, name: Optional[str]) -> None: ...
    def __eq__(self, other: Optional[Union[str, Tuple, FieldFile]]) -> bool: ...
    def __hash__(self): ...
    def _require_file(self) -> None: ...
    _file: Any = ...
    def _get_file(self) -> File: ...
    def _set_file(self, file: Optional[File]) -> None: ...
    def _del_file(self) -> None: ...
    file: Any = ...
    @property
    def path(self): ...
    @property
    def url(self) -> str: ...
    @property
    def size(self): ...
    def open(self, mode: str = ...) -> FieldFile: ...
    name: Any = ...
    def save(
        self, name: str, content: Union[ContentFile, UploadedFile], save: bool = ...
    ) -> None: ...
    def delete(self, save: bool = ...) -> None: ...
    @property
    def closed(self): ...
    def close(self) -> None: ...
    def __getstate__(self) -> Dict[str, Optional[Union[str, bool]]]: ...

class FileDescriptor:
    field: Any = ...
    def __init__(self, field: FileField) -> None: ...
    def __get__(
        self, instance: Optional[Model], cls: Type[Model] = ...
    ) -> Union[FileDescriptor, FieldFile]: ...
    def __set__(
        self, instance: Model, value: Optional[Union[str, FieldFile, InMemoryUploadedFile]]
    ) -> None: ...

class FileField(Field):
    attr_class: Any = ...
    descriptor_class: Any = ...
    description: Any = ...
    _primary_key_set_explicitly: Any = ...
    storage: Any = ...
    upload_to: Any = ...
    def __init__(
        self,
        verbose_name: Optional[str] = ...,
        name: None = ...,
        upload_to: Union[str, Callable] = ...,
        storage: Optional[Storage] = ...,
        **kwargs: Any,
    ) -> None: ...
    def check(self, **kwargs: Any) -> List[Any]: ...
    def _check_primary_key(self) -> List[Error]: ...
    def _check_upload_to(self) -> List[Any]: ...
    def deconstruct(self) -> Any: ...
    def get_internal_type(self) -> str: ...
    def get_prep_value(self, value: FieldFile) -> str: ...
    def pre_save(self, model_instance: Model, add: bool) -> FieldFile: ...
    def contribute_to_class(self, cls: Type[Model], name: str, **kwargs: Any) -> None: ...
    def generate_filename(self, instance: Optional[Model], filename: str) -> str: ...
    def save_form_data(
        self, instance: Model, data: Optional[Union[bool, FieldFile, SimpleUploadedFile]]
    ) -> None: ...
    def formfield(self, **kwargs: Any) -> FileField: ...

class ImageFileDescriptor(FileDescriptor):
    def __set__(self, instance: Any, value: Any) -> None: ...

class ImageFieldFile(ImageFile, FieldFile):
    def delete(self, save: bool = ...) -> None: ...

class ImageField(FileField):
    attr_class: Any = ...
    descriptor_class: Any = ...
    description: Any = ...
    def __init__(
        self,
        verbose_name: Optional[Any] = ...,
        name: Optional[Any] = ...,
        width_field: Optional[Any] = ...,
        height_field: Optional[Any] = ...,
        **kwargs: Any,
    ) -> None: ...
    def check(self, **kwargs: Any): ...
    def _check_image_library_installed(self): ...
    def deconstruct(self): ...
    def contribute_to_class(self, cls: Any, name: Any, **kwargs: Any) -> None: ...
    def update_dimension_fields(
        self, instance: Any, force: bool = ..., *args: Any, **kwargs: Any
    ): ...
    def formfield(self, **kwargs: Any): ...
