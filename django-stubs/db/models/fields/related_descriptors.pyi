from typing import Any, Callable, List, Optional, Tuple, Type, Union

from django.core.exceptions import ObjectDoesNotExist
from django.db.models.base import Model
from django.db.models.fields.related import ForeignObject
from django.db.models.fields.reverse_related import (ForeignObjectRel,
                                                     ManyToManyRel,
                                                     OneToOneRel)
from django.db.models.query import QuerySet


class ForwardManyToOneDescriptor:
    RelatedObjectDoesNotExist: Type[django.core.exceptions.ObjectDoesNotExist]
    field: django.db.models.fields.related.ForeignObject = ...
    def __init__(self, field_with_rel: ForeignObject) -> None: ...
    def RelatedObjectDoesNotExist(self) -> Type[ObjectDoesNotExist]: ...
    def is_cached(self, instance: Model) -> bool: ...
    def get_queryset(self, **hints: Any) -> QuerySet: ...
    def get_prefetch_queryset(
        self, instances: List[Model], queryset: None = ...
    ) -> Tuple[QuerySet, Callable, Callable, bool, str, bool]: ...
    def get_object(self, instance: Model) -> Model: ...
    def __get__(
        self, instance: Optional[Model], cls: Type[Model] = ...
    ) -> Optional[Union[Model, ForwardManyToOneDescriptor]]: ...
    def __set__(self, instance: Model, value: Optional[Model]) -> None: ...
    def __reduce__(self): ...

class ForwardOneToOneDescriptor(ForwardManyToOneDescriptor):
    RelatedObjectDoesNotExist: Type[django.core.exceptions.ObjectDoesNotExist]
    field: django.db.models.fields.related.OneToOneField
    def get_object(self, instance: Model) -> Model: ...
    def __set__(self, instance: Model, value: Optional[Model]) -> None: ...

class ReverseOneToOneDescriptor:
    RelatedObjectDoesNotExist: Type[django.core.exceptions.ObjectDoesNotExist]
    related: django.db.models.fields.reverse_related.OneToOneRel = ...
    def __init__(self, related: OneToOneRel) -> None: ...
    def RelatedObjectDoesNotExist(self) -> Type[ObjectDoesNotExist]: ...
    def is_cached(self, instance: Model) -> bool: ...
    def get_queryset(self, **hints: Any) -> QuerySet: ...
    def get_prefetch_queryset(
        self, instances: List[Model], queryset: None = ...
    ) -> Tuple[QuerySet, Callable, Callable, bool, str, bool]: ...
    def __get__(
        self, instance: Optional[Model], cls: Type[Model] = ...
    ) -> Union[Model, ReverseOneToOneDescriptor]: ...
    def __set__(self, instance: Model, value: None) -> None: ...
    def __reduce__(self): ...

class ReverseManyToOneDescriptor:
    rel: django.db.models.fields.mixins.FieldCacheMixin = ...
    field: django.db.models.fields.mixins.FieldCacheMixin = ...
    def __init__(self, rel: ForeignObjectRel) -> None: ...
    def related_manager_cls(self): ...
    def __get__(
        self, instance: Optional[Model], cls: Type[Model] = ...
    ) -> ReverseManyToOneDescriptor: ...
    def __set__(self, instance: Model, value: List[Any]) -> Any: ...

def create_reverse_many_to_one_manager(superclass: Any, rel: Any): ...

class ManyToManyDescriptor(ReverseManyToOneDescriptor):
    field: django.db.models.fields.related.RelatedField
    rel: django.db.models.fields.reverse_related.ManyToManyRel
    reverse: bool = ...
    def __init__(self, rel: ManyToManyRel, reverse: bool = ...) -> None: ...
    @property
    def through(self): ...
    def related_manager_cls(self): ...

def create_forward_many_to_many_manager(
    superclass: Any, rel: Any, reverse: Any
): ...
