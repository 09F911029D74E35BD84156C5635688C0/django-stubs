# Stubs for django.db.models.fields.related_descriptors (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

from django.core.exceptions import ObjectDoesNotExist
from django.db.models.base import Model
from django.db.models.expressions import F
from django.db.models.fields.related import ForeignObject
from django.db.models.fields.reverse_related import ForeignObjectRel, ManyToManyRel, OneToOneRel
from django.db.models.query import QuerySet
from typing import Callable, List, Optional, Tuple, Type, Union
class ForwardManyToOneDescriptor:
    field: Any = ...
    def __init__(self, field_with_rel: ForeignObject) -> None: ...
    def RelatedObjectDoesNotExist(self) -> Type[ObjectDoesNotExist]: ...
    def is_cached(self, instance: Model) -> bool: ...
    def get_queryset(self, **hints: Any) -> QuerySet: ...
    def get_prefetch_queryset(self, instances: List[Model], queryset: Optional[QuerySet] = ...) -> Tuple[QuerySet, Callable, Callable, bool, str, bool]: ...
    def get_object(self, instance: Model) -> Model: ...
    def __get__(self, instance: Optional[Model], cls: Type[Model] = ...) -> Optional[Union[Model, ForwardManyToOneDescriptor]]: ...
    def __set__(self, instance: Model, value: Optional[Union[Model, F]]) -> None: ...
    def __reduce__(self): ...

class ForwardOneToOneDescriptor(ForwardManyToOneDescriptor):
    def get_object(self, instance: Model) -> Model: ...
    def __set__(self, instance: Model, value: Optional[Model]) -> None: ...

class ReverseOneToOneDescriptor:
    related: Any = ...
    def __init__(self, related: OneToOneRel) -> None: ...
    def RelatedObjectDoesNotExist(self) -> Type[ObjectDoesNotExist]: ...
    def is_cached(self, instance: Model) -> bool: ...
    def get_queryset(self, **hints: Any) -> QuerySet: ...
    def get_prefetch_queryset(self, instances: Any, queryset: Optional[Any] = ...): ...
    def __get__(self, instance: Optional[Model], cls: Type[Model] = ...) -> Union[Model, ReverseOneToOneDescriptor]: ...
    def __set__(self, instance: Model, value: Optional[Model]) -> None: ...
    def __reduce__(self): ...

class ReverseManyToOneDescriptor:
    rel: Any = ...
    field: Any = ...
    def __init__(self, rel: ForeignObjectRel) -> None: ...
    def related_manager_cls(self): ...
    def __get__(self, instance: Optional[Model], cls: Type[Model] = ...) -> ReverseManyToOneDescriptor: ...
    def _get_set_deprecation_msg_params(self) -> Tuple[str, str]: ...
    def __set__(self, instance: Any, value: Any) -> None: ...

def create_reverse_many_to_one_manager(superclass: Any, rel: Any): ...

class ManyToManyDescriptor(ReverseManyToOneDescriptor):
    reverse: Any = ...
    def __init__(self, rel: ManyToManyRel, reverse: bool = ...) -> None: ...
    @property
    def through(self): ...
    def related_manager_cls(self): ...
    def _get_set_deprecation_msg_params(self): ...

def create_forward_many_to_many_manager(superclass: Any, rel: Any, reverse: Any): ...
