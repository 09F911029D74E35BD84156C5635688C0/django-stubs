from typing import (Any, Callable, Dict, Iterator, List, Optional, Set, Tuple,
                    Type, Union)

from django.apps.config import AppConfig
from django.contrib.auth.base_user import AbstractBaseUser
from django.contrib.auth.models import AbstractUser, PermissionsMixin
from django.contrib.sessions.base_session import AbstractBaseSession
from django.db.backends.sqlite3.base import DatabaseWrapper
from django.db.models.base import Model
from django.db.models.fields import Field
from django.db.models.fields.mixins import FieldCacheMixin
from django.db.models.fields.related import OneToOneField
from django.db.models.fields.reverse_related import ForeignObjectRel
from django.db.models.manager import Manager
from django.db.models.query_utils import PathInfo
from django.utils.datastructures import ImmutableList

PROXY_PARENTS: Any
EMPTY_RELATION_TREE: Any
IMMUTABLE_WARNING: str
DEFAULT_NAMES: Any

def normalize_together(
    option_together: Union[
        Set[Tuple[str, str]],
        List[List[str]],
        Tuple[str, str],
        Tuple[Tuple[str, str]],
    ]
) -> Union[Set[Tuple[str, str]], Tuple]: ...
def make_immutable_fields_list(
    name: str, data: Union[List[Union[FieldCacheMixin, Field]], Iterator[Any]]
) -> ImmutableList: ...

class Options:
    FORWARD_PROPERTIES: Any = ...
    REVERSE_PROPERTIES: Any = ...
    default_apps: Any = ...
    local_fields: List[Any] = ...
    local_many_to_many: List[Any] = ...
    private_fields: List[Any] = ...
    local_managers: List[Any] = ...
    base_manager_name: None = ...
    default_manager_name: None = ...
    model_name: None = ...
    verbose_name: None = ...
    verbose_name_plural: None = ...
    db_table: str = ...
    ordering: List[Any] = ...
    indexes: List[Any] = ...
    unique_together: List[Any] = ...
    index_together: List[Any] = ...
    select_on_save: bool = ...
    default_permissions: Tuple[str, str, str, str] = ...
    permissions: List[Any] = ...
    object_name: None = ...
    app_label: Optional[str] = ...
    get_latest_by: None = ...
    order_with_respect_to: None = ...
    db_tablespace: str = ...
    required_db_features: List[Any] = ...
    required_db_vendor: None = ...
    meta: Type[
        Union[django.contrib.auth.base_user.AbstractBaseUser.Meta, Any]
    ] = ...
    pk: None = ...
    auto_field: None = ...
    abstract: bool = ...
    managed: bool = ...
    proxy: bool = ...
    proxy_for_model: None = ...
    concrete_model: None = ...
    swappable: None = ...
    parents: collections.OrderedDict = ...
    auto_created: bool = ...
    related_fkey_lookups: List[Any] = ...
    apps: django.apps.registry.Apps = ...
    default_related_name: None = ...
    def __init__(
        self,
        meta: Optional[
            Type[
                Union[
                    AbstractUser.Meta,
                    Any,
                    PermissionsMixin.Meta,
                    AbstractBaseUser.Meta,
                    AbstractBaseSession.Meta,
                ]
            ]
        ],
        app_label: str = ...,
    ) -> None: ...
    @property
    def label(self) -> str: ...
    @property
    def label_lower(self) -> str: ...
    @property
    def app_config(self) -> AppConfig: ...
    @property
    def installed(self): ...
    model: Any = ...
    original_attrs: Any = ...
    def contribute_to_class(self, cls: Type[Model], name: str) -> None: ...
    def add_manager(self, manager: Manager) -> None: ...
    def add_field(self, field: Field, private: bool = ...) -> None: ...
    def setup_pk(self, field: Field) -> None: ...
    def setup_proxy(self, target: Type[Model]) -> None: ...
    def can_migrate(self, connection: Union[str, DatabaseWrapper]) -> bool: ...
    @property
    def verbose_name_raw(self) -> Any: ...
    @property
    def swapped(self) -> None: ...
    def managers(self) -> ImmutableList: ...
    def managers_map(self) -> Dict[str, Manager]: ...
    def base_manager(self) -> Manager: ...
    def default_manager(self) -> Manager: ...
    def fields(self) -> ImmutableList: ...
    def concrete_fields(self) -> ImmutableList: ...
    def local_concrete_fields(self) -> ImmutableList: ...
    def many_to_many(self) -> ImmutableList: ...
    def related_objects(self) -> ImmutableList: ...
    def fields_map(self) -> Dict[str, ForeignObjectRel]: ...
    def get_field(
        self, field_name: Union[str, Callable]
    ) -> Union[FieldCacheMixin, Field]: ...
    def get_base_chain(self, model: Type[Model]) -> List[Type[Model]]: ...
    def get_parent_list(self) -> List[Type[Model]]: ...
    def get_ancestor_link(
        self, ancestor: Type[Model]
    ) -> Optional[OneToOneField]: ...
    def get_path_to_parent(self, parent: Type[Model]) -> List[PathInfo]: ...
    def get_path_from_parent(self, parent: Any): ...
    def get_fields(
        self, include_parents: bool = ..., include_hidden: bool = ...
    ) -> ImmutableList: ...
