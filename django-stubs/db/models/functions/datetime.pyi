# Stubs for django.db.models.functions.datetime (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.db.models import Func, Transform
from typing import Any, Optional

from datetime import date, time
from django.db.backends.sqlite3.base import DatabaseWrapper
from django.db.models.expressions import Col
from django.db.models.fields import DateTimeCheckMixin, IntegerField
from django.db.models.sql.compiler import SQLCompiler
from django.db.models.sql.query import Query
from typing import Any, List, Optional, Tuple, Union
class TimezoneMixin:
    tzinfo: Any = ...
    def get_tzname(self) -> Optional[str]: ...

class Extract(TimezoneMixin, Transform):
    lookup_name: Any = ...
    output_field: Any = ...
    tzinfo: Any = ...
    def __init__(self, expression: Union[str, Col, TruncDate], lookup_name: Optional[str] = ..., tzinfo: None = ..., **extra: Any) -> None: ...
    def as_sql(self, compiler: SQLCompiler, connection: DatabaseWrapper) -> Tuple[str, List[Any]]: ...
    def resolve_expression(self, query: Query = ..., allow_joins: bool = ..., reuse: None = ..., summarize: bool = ..., for_save: bool = ...) -> Extract: ...

class ExtractYear(Extract):
    lookup_name: str = ...

class ExtractMonth(Extract):
    lookup_name: str = ...

class ExtractDay(Extract):
    lookup_name: str = ...

class ExtractWeek(Extract):
    lookup_name: str = ...

class ExtractWeekDay(Extract):
    lookup_name: str = ...

class ExtractQuarter(Extract):
    lookup_name: str = ...

class ExtractHour(Extract):
    lookup_name: str = ...

class ExtractMinute(Extract):
    lookup_name: str = ...

class ExtractSecond(Extract):
    lookup_name: str = ...

class Now(Func):
    template: str = ...
    output_field: Any = ...
    def as_postgresql(self, compiler: Any, connection: Any): ...

class TruncBase(TimezoneMixin, Transform):
    kind: Any = ...
    tzinfo: Any = ...
    def __init__(self, expression: Union[str, Col], output_field: Optional[DateTimeCheckMixin] = ..., tzinfo: None = ..., **extra: Any) -> None: ...
    def as_sql(self, compiler: SQLCompiler, connection: DatabaseWrapper) -> Tuple[str, List[Any]]: ...
    def resolve_expression(self, query: Query = ..., allow_joins: bool = ..., reuse: None = ..., summarize: bool = ..., for_save: bool = ...) -> TruncBase: ...
    def convert_value(self, value: Union[date, time], expression: django.db.models.functions.TruncBase, connection: DatabaseWrapper) -> Union[date, time]: ...

class Trunc(TruncBase):
    kind: Any = ...
    def __init__(self, expression: str, kind: str, output_field: Optional[Union[IntegerField, DateTimeCheckMixin]] = ..., tzinfo: None = ..., **extra: Any) -> None: ...

class TruncYear(TruncBase):
    kind: str = ...

class TruncQuarter(TruncBase):
    kind: str = ...

class TruncMonth(TruncBase):
    kind: str = ...

class TruncWeek(TruncBase):
    kind: str = ...

class TruncDay(TruncBase):
    kind: str = ...

class TruncDate(TruncBase):
    kind: str = ...
    lookup_name: str = ...
    output_field: Any = ...
    def as_sql(self, compiler: SQLCompiler, connection: DatabaseWrapper) -> Tuple[str, List[Any]]: ...

class TruncTime(TruncBase):
    kind: str = ...
    lookup_name: str = ...
    output_field: Any = ...
    def as_sql(self, compiler: SQLCompiler, connection: DatabaseWrapper) -> Tuple[str, List[Any]]: ...

class TruncHour(TruncBase):
    kind: str = ...

class TruncMinute(TruncBase):
    kind: str = ...

class TruncSecond(TruncBase):
    kind: str = ...
