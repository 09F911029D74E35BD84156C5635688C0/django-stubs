# Stubs for django.db.models.functions.text (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.db.models import Func, Transform
from typing import Any, Optional

from django.db.backends.sqlite3.base import DatabaseWrapper
from django.db.models.expressions import Col, F, Value
from django.db.models.sql.compiler import SQLCompiler
from typing import Any, List, Tuple, Union

class BytesToCharFieldConversionMixin:
    def convert_value(
        self, value: str, expression: LPad, connection: DatabaseWrapper
    ) -> str: ...

class Chr(Transform):
    function: str = ...
    lookup_name: str = ...
    def as_mysql(self, compiler: Any, connection: Any): ...
    def as_oracle(self, compiler: Any, connection: Any): ...
    def as_sqlite(
        self, compiler: SQLCompiler, connection: DatabaseWrapper, **extra_context: Any
    ) -> Union[Tuple[str, List[int]], Tuple[str, List[Any]]]: ...

class ConcatPair(Func):
    function: str = ...
    def as_sqlite(
        self, compiler: SQLCompiler, connection: DatabaseWrapper
    ) -> Tuple[str, List[str]]: ...
    def as_mysql(self, compiler: Any, connection: Any): ...
    def coalesce(self) -> ConcatPair: ...

class Concat(Func):
    function: Any = ...
    template: str = ...
    def __init__(self, *expressions: Any, **extra: Any) -> None: ...
    def _paired(
        self,
        expressions: Union[Tuple[Value, str, Value], Tuple[Value, str], Tuple[str, str]],
    ) -> ConcatPair: ...

class Left(Func):
    function: str = ...
    arity: int = ...
    def __init__(self, expression: str, length: int, **extra: Any) -> None: ...
    def get_substr(self) -> Substr: ...
    def use_substr(
        self, compiler: SQLCompiler, connection: DatabaseWrapper, **extra_context: Any
    ) -> Tuple[str, List[int]]: ...
    as_oracle: Any = ...
    as_sqlite: Any = ...

class Length(Transform):
    function: str = ...
    lookup_name: str = ...
    output_field: Any = ...
    def as_mysql(self, compiler: Any, connection: Any): ...

class Lower(Transform):
    function: str = ...
    lookup_name: str = ...

class LPad(BytesToCharFieldConversionMixin, Func):
    function: str = ...
    def __init__(
        self,
        expression: str,
        length: Union[int, Length],
        fill_text: Value = ...,
        **extra: Any,
    ) -> None: ...

class LTrim(Transform):
    function: str = ...
    lookup_name: str = ...

class Ord(Transform):
    function: str = ...
    lookup_name: str = ...
    output_field: Any = ...
    def as_mysql(self, compiler: Any, connection: Any, **extra_context: Any): ...
    def as_sqlite(
        self, compiler: SQLCompiler, connection: DatabaseWrapper, **extra_context: Any
    ) -> Union[Tuple[str, List[str]], Tuple[str, List[Any]]]: ...

class Repeat(BytesToCharFieldConversionMixin, Func):
    function: str = ...
    def __init__(self, expression: Any, number: Any, **extra: Any) -> None: ...
    def as_oracle(self, compiler: Any, connection: Any, **extra_context: Any): ...

class Replace(Func):
    function: str = ...
    def __init__(
        self, expression: F, text: Value, replacement: Value = ..., **extra: Any
    ) -> None: ...

class Right(Left):
    function: str = ...
    def get_substr(self) -> Substr: ...

class RPad(LPad):
    function: str = ...

class RTrim(Transform):
    function: str = ...
    lookup_name: str = ...

class StrIndex(Func):
    function: str = ...
    arity: int = ...
    output_field: Any = ...
    def as_postgresql(self, compiler: Any, connection: Any): ...

class Substr(Func):
    function: str = ...
    def __init__(
        self,
        expression: Union[str, Col],
        pos: Union[int, Value],
        length: Union[int, Value] = ...,
        **extra: Any,
    ) -> None: ...
    def as_sqlite(
        self, compiler: SQLCompiler, connection: DatabaseWrapper
    ) -> Union[Tuple[str, List[int]], Tuple[str, List[Union[str, int]]]]: ...
    def as_oracle(
        self, compiler: SQLCompiler, connection: DatabaseWrapper
    ) -> Tuple[str, List[int]]: ...

class Trim(Transform):
    function: str = ...
    lookup_name: str = ...

class Upper(Transform):
    function: str = ...
    lookup_name: str = ...
