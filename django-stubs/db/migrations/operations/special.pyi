# Stubs for django.db.migrations.operations.special (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .base import Operation
from typing import Any, Optional

from django.db.backends.sqlite3.schema import DatabaseSchemaEditor
from django.db.migrations.operations.fields import AddField
from django.db.migrations.operations.models import CreateModel, ModelOperation
from django.db.migrations.state import ProjectState, StateApps
from typing import Callable, Dict, List, Optional, Union

class SeparateDatabaseAndState(Operation):
    serialization_expand_args: Any = ...
    database_operations: Any = ...
    state_operations: Any = ...
    def __init__(
        self,
        database_operations: List[ModelOperation] = ...,
        state_operations: Union[
            List[CreateModel], List[AddField], List[ModelOperation]
        ] = ...,
    ) -> None: ...
    def deconstruct(self): ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    def database_forwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def database_backwards(
        self, app_label: Any, schema_editor: Any, from_state: Any, to_state: Any
    ) -> None: ...
    def describe(self): ...

class RunSQL(Operation):
    noop: str = ...
    sql: Any = ...
    reverse_sql: Any = ...
    state_operations: Any = ...
    hints: Any = ...
    elidable: Any = ...
    def __init__(
        self,
        sql: Any,
        reverse_sql: Optional[Any] = ...,
        state_operations: Optional[Any] = ...,
        hints: Optional[Any] = ...,
        elidable: bool = ...,
    ) -> None: ...
    def deconstruct(self): ...
    @property
    def reversible(self): ...
    def state_forwards(self, app_label: Any, state: Any) -> None: ...
    def database_forwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def database_backwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def describe(self): ...
    def _run_sql(
        self, schema_editor: DatabaseSchemaEditor, sqls: Union[str, List[str]]
    ) -> None: ...

class RunPython(Operation):
    reduces_to_sql: bool = ...
    atomic: Any = ...
    code: Any = ...
    reverse_code: Any = ...
    hints: Any = ...
    elidable: Any = ...
    def __init__(
        self,
        code: Union[str, Callable],
        reverse_code: Optional[Callable] = ...,
        atomic: None = ...,
        hints: Optional[Dict[str, str]] = ...,
        elidable: bool = ...,
    ) -> None: ...
    def deconstruct(self): ...
    @property
    def reversible(self) -> bool: ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    def database_forwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def database_backwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def describe(self) -> str: ...
    @staticmethod
    def noop(apps: StateApps, schema_editor: DatabaseSchemaEditor) -> None: ...
