# Stubs for django.db.migrations.operations.models (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .fields import AddField, AlterField, FieldOperation, RemoveField, RenameField
from django.db.migrations.operations.base import Operation
from typing import Any, Optional

from django.db.backends.sqlite3.schema import DatabaseSchemaEditor
from django.db.migrations.operations.fields import FieldOperation
from django.db.migrations.state import ProjectState
from django.db.models.indexes import Index
from typing import Any, Dict, Iterator, List, Optional, Set, Tuple, Union

def _check_for_duplicates(arg_name: str, objs: Iterator[Any]) -> None: ...

class ModelOperation(Operation):
    name: Any = ...
    def __init__(self, name: str) -> None: ...
    def name_lower(self) -> str: ...
    def references_model(self, name: str, app_label: Optional[str] = ...) -> bool: ...
    def reduce(
        self,
        operation: Union[FieldOperation, ModelOperation],
        in_between: Any,
        app_label: Optional[str] = ...,
    ) -> bool: ...

class CreateModel(ModelOperation):
    serialization_expand_args: Any = ...
    fields: Any = ...
    options: Any = ...
    bases: Any = ...
    managers: Any = ...
    def __init__(
        self,
        name: str,
        fields: Any,
        options: Any = ...,
        bases: Any = ...,
        managers: Any = ...,
    ) -> None: ...
    def deconstruct(self) -> Any: ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    def database_forwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def database_backwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def describe(self) -> str: ...
    def references_model(self, name: str, app_label: Optional[str] = ...) -> bool: ...
    def model_to_key(self, model: str) -> List[str]: ...
    def reduce(
        self, operation: Operation, in_between: Any, app_label: Optional[str] = ...
    ) -> Union[bool, List[CreateModel]]: ...

class DeleteModel(ModelOperation):
    def deconstruct(self) -> Tuple[str, List[Any], Dict[str, str]]: ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    def database_forwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def database_backwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def describe(self) -> str: ...

class RenameModel(ModelOperation):
    old_name: Any = ...
    new_name: Any = ...
    def __init__(self, old_name: str, new_name: str) -> None: ...
    def old_name_lower(self) -> str: ...
    def new_name_lower(self) -> str: ...
    def deconstruct(self) -> Tuple[str, List[Any], Dict[str, str]]: ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    def database_forwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def database_backwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def references_model(self, name: Any, app_label: Optional[Any] = ...): ...
    def describe(self): ...
    def reduce(
        self, operation: AlterModelTable, in_between: List[Any], app_label: str = ...
    ) -> bool: ...

class AlterModelTable(ModelOperation):
    table: Any = ...
    def __init__(self, name: str, table: str) -> None: ...
    def deconstruct(self) -> Tuple[str, List[Any], Dict[str, str]]: ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    def database_forwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def database_backwards(
        self, app_label: Any, schema_editor: Any, from_state: Any, to_state: Any
    ): ...
    def describe(self) -> str: ...
    def reduce(
        self, operation: DeleteModel, in_between: List[Any], app_label: None = ...
    ) -> List[DeleteModel]: ...

class ModelOptionOperation(ModelOperation):
    def reduce(
        self,
        operation: Union[FieldOperation, CreateModel, FieldRelatedOptionOperation],
        in_between: List[DeleteModel],
        app_label: Optional[str] = ...,
    ) -> Union[bool, List[AlterUniqueTogether]]: ...

class FieldRelatedOptionOperation(ModelOptionOperation):
    def reduce(
        self,
        operation: Union[FieldOperation, CreateModel, AlterIndexTogether],
        in_between: List[DeleteModel],
        app_label: Optional[str] = ...,
    ) -> Any: ...

class AlterUniqueTogether(FieldRelatedOptionOperation):
    option_name: str = ...
    unique_together: Any = ...
    def __init__(
        self,
        name: str,
        unique_together: Optional[
            Union[List[List[str]], Set[Tuple[str, str]], List[Tuple[str, str]]]
        ],
    ) -> None: ...
    def deconstruct(
        self
    ) -> Tuple[str, List[Any], Dict[str, Union[str, Set[Tuple[str, str]]]]]: ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    def database_forwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def database_backwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def references_field(
        self, model_name: str, name: str, app_label: Optional[str] = ...
    ) -> bool: ...
    def describe(self) -> str: ...

class AlterIndexTogether(FieldRelatedOptionOperation):
    option_name: str = ...
    index_together: Any = ...
    def __init__(
        self,
        name: str,
        index_together: Optional[
            Union[List[List[str]], List[Tuple[str, str]], Set[Tuple[str, str]]]
        ],
    ) -> None: ...
    def deconstruct(
        self
    ) -> Tuple[str, List[Any], Dict[str, Union[str, Set[Tuple[str, str]]]]]: ...
    def state_forwards(self, app_label: Any, state: Any) -> None: ...
    def database_forwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def database_backwards(
        self, app_label: Any, schema_editor: Any, from_state: Any, to_state: Any
    ): ...
    def references_field(
        self, model_name: str, name: str, app_label: None = ...
    ) -> bool: ...
    def describe(self): ...

class AlterOrderWithRespectTo(FieldRelatedOptionOperation):
    order_with_respect_to: Any = ...
    def __init__(self, name: str, order_with_respect_to: str) -> None: ...
    def deconstruct(self) -> Tuple[str, List[Any], Dict[str, str]]: ...
    def state_forwards(self, app_label: Any, state: Any) -> None: ...
    def database_forwards(
        self, app_label: Any, schema_editor: Any, from_state: Any, to_state: Any
    ) -> None: ...
    def database_backwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def references_field(
        self, model_name: str, name: str, app_label: None = ...
    ) -> bool: ...
    def describe(self) -> str: ...

class AlterModelOptions(ModelOptionOperation):
    ALTER_OPTION_KEYS: Any = ...
    options: Any = ...
    def __init__(
        self, name: str, options: Dict[str, Union[List[Tuple[str, str]], str]]
    ) -> None: ...
    def deconstruct(
        self
    ) -> Tuple[str, List[Any], Dict[str, Union[str, Dict[str, List[Tuple[str, str]]]]]]: ...
    def state_forwards(self, app_label: Any, state: Any) -> None: ...
    def database_forwards(
        self, app_label: Any, schema_editor: Any, from_state: Any, to_state: Any
    ) -> None: ...
    def database_backwards(
        self, app_label: Any, schema_editor: Any, from_state: Any, to_state: Any
    ) -> None: ...
    def describe(self): ...

class AlterModelManagers(ModelOptionOperation):
    serialization_expand_args: Any = ...
    managers: Any = ...
    def __init__(self, name: str, managers: List[Any]) -> None: ...
    def deconstruct(self): ...
    def state_forwards(self, app_label: Any, state: Any) -> None: ...
    def database_forwards(
        self, app_label: Any, schema_editor: Any, from_state: Any, to_state: Any
    ) -> None: ...
    def database_backwards(
        self, app_label: Any, schema_editor: Any, from_state: Any, to_state: Any
    ) -> None: ...
    def describe(self) -> str: ...

class IndexOperation(Operation):
    option_name: str = ...
    def model_name_lower(self) -> str: ...

class AddIndex(IndexOperation):
    model_name: Any = ...
    index: Any = ...
    def __init__(self, model_name: str, index: Index) -> None: ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    def database_forwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def database_backwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def deconstruct(self): ...
    def describe(self) -> str: ...

class RemoveIndex(IndexOperation):
    model_name: Any = ...
    name: Any = ...
    def __init__(self, model_name: str, name: str) -> None: ...
    def state_forwards(self, app_label: str, state: ProjectState) -> None: ...
    def database_forwards(
        self, app_label: Any, schema_editor: Any, from_state: Any, to_state: Any
    ) -> None: ...
    def database_backwards(
        self,
        app_label: str,
        schema_editor: DatabaseSchemaEditor,
        from_state: ProjectState,
        to_state: ProjectState,
    ) -> None: ...
    def deconstruct(self): ...
    def describe(self): ...
