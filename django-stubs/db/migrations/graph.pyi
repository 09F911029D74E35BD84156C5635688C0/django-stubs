# Stubs for django.db.migrations.graph (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .exceptions import CircularDependencyError, NodeNotFoundError
from typing import Any, Optional

from django.db.migrations.migration import Migration, SwappableTuple
from django.db.migrations.state import ProjectState
from typing import Callable, List, Optional, Tuple, Union

RECURSION_DEPTH_WARNING: str

class Node:
    key: Any = ...
    children: Any = ...
    parents: Any = ...
    def __init__(self, key: Tuple[str, str]) -> None: ...
    def __eq__(self, other: Tuple[str, str]) -> bool: ...
    def __lt__(self, other: Union[Node, Tuple[str, str]]) -> bool: ...
    def __hash__(self) -> int: ...
    def __getitem__(self, item: int) -> str: ...
    def __str__(self): ...
    def __repr__(self): ...
    def add_child(self, child: Node) -> None: ...
    def add_parent(self, parent: Node) -> None: ...
    def ancestors(self) -> List[Tuple[str, str]]: ...
    def descendants(self) -> List[Tuple[str, str]]: ...

class DummyNode(Node):
    origin: Any = ...
    error_message: Any = ...
    def __init__(
        self, key: Tuple[str, str], origin: Union[Migration, str], error_message: str
    ) -> None: ...
    __class__: Any = ...
    def promote(self) -> None: ...
    def raise_error(self) -> None: ...

class MigrationGraph:
    node_map: Any = ...
    nodes: Any = ...
    cached: bool = ...
    def __init__(self) -> None: ...
    def add_node(self, key: Tuple[str, str], migration: object) -> None: ...
    def add_dummy_node(
        self, key: Tuple[str, str], origin: Union[Migration, str], error_message: str
    ) -> None: ...
    def add_dependency(
        self,
        migration: Optional[Union[Migration, str]],
        child: Tuple[str, str],
        parent: Tuple[str, str],
        skip_validation: bool = ...,
    ) -> None: ...
    def remove_replaced_nodes(
        self, replacement: Tuple[str, str], replaced: List[Tuple[str, str]]
    ) -> None: ...
    def remove_replacement_node(
        self, replacement: Tuple[str, str], replaced: List[Tuple[str, str]]
    ) -> None: ...
    def validate_consistency(self) -> None: ...
    def clear_cache(self) -> None: ...
    def forwards_plan(self, target: Tuple[str, str]) -> List[Tuple[str, str]]: ...
    def backwards_plan(
        self, target: Union[Node, Tuple[str, str]]
    ) -> List[Tuple[str, str]]: ...
    def iterative_dfs(self, start: Any, forwards: bool = ...): ...
    def root_nodes(self, app: Optional[str] = ...) -> List[Tuple[str, str]]: ...
    def leaf_nodes(self, app: Optional[str] = ...) -> List[Tuple[str, str]]: ...
    def ensure_not_cyclic(
        self, start: Union[Node, Tuple[str, str]], get_children: Callable
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def _nodes_and_edges(self) -> Tuple[int, int]: ...
    def _generate_plan(
        self, nodes: List[Tuple[str, str]], at_end: bool
    ) -> List[Tuple[str, str]]: ...
    def make_state(
        self,
        nodes: Optional[Tuple[str, str]] = ...,
        at_end: bool = ...,
        real_apps: List[str] = ...,
    ) -> ProjectState: ...
    def __contains__(self, node: Union[SwappableTuple, Tuple[str, str]]) -> bool: ...
