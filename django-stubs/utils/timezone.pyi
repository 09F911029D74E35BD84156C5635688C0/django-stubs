from contextlib import ContextDecorator
from datetime import date, datetime, time, timedelta, tzinfo
from decimal import Decimal
from typing import Any, Dict, List, Optional, Tuple, Union

from django.contrib.auth.models import AnonymousUser
from django.contrib.messages.storage.base import Message
from django.core.exceptions import FieldDoesNotExist
from django.db.models.base import Model
from django.db.models.fields.files import FieldFile
from django.db.models.query import QuerySet
from django.forms.boundfield import BoundField, BoundWidget
from django.forms.forms import BaseForm
from django.forms.utils import ErrorDict
from django.forms.widgets import Media
from django.urls.resolvers import CheckURLMixin, LocalePrefixPattern


class FixedOffset(tzinfo):
    def __init__(
        self,
        offset: Optional[Union[float, int]] = ...,
        name: Optional[str] = ...,
    ) -> None: ...
    def utcoffset(self, dt: Union[datetime, str]) -> timedelta: ...
    def tzname(self, dt: Optional[Union[datetime, str]]) -> str: ...
    def dst(self, dt: datetime) -> timedelta: ...

utc: Any

def get_fixed_timezone(offset: Union[timedelta, int]) -> FixedOffset: ...
def get_default_timezone(): ...
def get_default_timezone_name() -> str: ...
def get_current_timezone() -> FixedOffset: ...
def get_current_timezone_name() -> str: ...
def activate(timezone: Optional[Union[FixedOffset, str]]) -> None: ...
def deactivate() -> None: ...

class override(ContextDecorator):
    timezone: Optional[Union[django.utils.timezone.FixedOffset, str]] = ...
    def __init__(self, timezone: Optional[Union[FixedOffset, str]]) -> None: ...
    old_timezone: Optional[django.utils.timezone.FixedOffset] = ...
    def __enter__(self) -> None: ...
    def __exit__(
        self, exc_type: None, exc_value: None, traceback: None
    ) -> None: ...

def localtime(
    value: Optional[datetime] = ..., timezone: Optional[FixedOffset] = ...
) -> datetime: ...
def now() -> datetime: ...
def is_aware(value: Union[datetime, time]) -> bool: ...
def is_naive(value: datetime) -> bool: ...
def make_aware(
    value: datetime,
    timezone: Optional[FixedOffset] = ...,
    is_dst: Optional[bool] = ...,
) -> datetime: ...
def make_naive(
    value: datetime, timezone: Optional[FixedOffset] = ...
) -> datetime: ...
