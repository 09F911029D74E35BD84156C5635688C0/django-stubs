# Stubs for django.utils.translation.trans_real (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import gettext as gettext_module
from typing import Any, Optional

from collections import OrderedDict
from django.core.handlers.wsgi import WSGIRequest
from gettext import NullTranslations
from typing import List, Optional, Tuple
_translations: Any
_active: Any
_default: Any
CONTEXT_SEPARATOR: str
accept_language_re: Any
language_code_re: Any
language_code_prefix_re: Any

def reset_cache(**kwargs: Any) -> None: ...

class DjangoTranslation(gettext_module.GNUTranslations):
    domain: str = ...
    __language: Any = ...
    __to_language: Any = ...
    __locale: Any = ...
    _catalog: Any = ...
    plural: Any = ...
    def __init__(self, language: str, domain: Optional[str] = ..., localedirs: Optional[List[str]] = ...) -> None: ...
    def __repr__(self): ...
    def _new_gnu_trans(self, localedir: str, use_null_fallback: bool = ...) -> NullTranslations: ...
    def _init_translation_catalog(self) -> None: ...
    def _add_installed_apps_translations(self) -> None: ...
    def _add_local_translations(self) -> None: ...
    def _add_fallback(self, localedirs: Optional[List[str]] = ...) -> None: ...
    _info: Any = ...
    def merge(self, other: NullTranslations) -> None: ...
    def language(self): ...
    def to_language(self) -> str: ...

def translation(language: str) -> DjangoTranslation: ...
def activate(language: str) -> None: ...
def deactivate() -> None: ...
def deactivate_all() -> None: ...
def get_language() -> Optional[str]: ...
def get_language_bidi() -> bool: ...
def catalog(): ...
def gettext(message: str) -> str: ...
def pgettext(context: str, message: str) -> str: ...
def gettext_noop(message: str) -> str: ...
def do_ntranslate(singular: str, plural: str, number: float, translation_function: str) -> str: ...
def ngettext(singular: str, plural: str, number: float) -> str: ...
def npgettext(context: str, singular: str, plural: str, number: int) -> str: ...
def all_locale_paths() -> List[str]: ...
def check_for_language(lang_code: str) -> bool: ...
def get_languages() -> OrderedDict: ...
def get_supported_language_variant(lang_code: Optional[str], strict: bool = ...) -> str: ...
def get_language_from_path(path: str, strict: bool = ...) -> Optional[str]: ...
def get_language_from_request(request: WSGIRequest, check_path: bool = ...) -> str: ...
def parse_accept_lang_header(lang_string: str) -> Tuple: ...
