# Stubs for django.utils.functional (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

from django.contrib.auth.models import User
from django.db.models.base import Model
from typing import Any, Callable, Dict, List, Tuple, Type, Union
def curry(_curried_func: Any, *args: Any, **kwargs: Any): ...

class cached_property:
    func: Any = ...
    __doc__: Any = ...
    name: Any = ...
    def __init__(self, func: Any, name: Optional[Any] = ...) -> None: ...
    def __get__(self, instance: Any, cls: Type[Any] = ...) -> Any: ...

class Promise: ...

def lazy(func: Any, *resultclasses: Any): ...
def _lazy_proxy_unpickle(func: Any, args: Any, kwargs: Any, *resultclasses: Any): ...
def lazystr(text: Any): ...
def keep_lazy(*resultclasses: Any): ...
def keep_lazy_text(func: Any): ...

empty: Any

def new_method_proxy(func: Any): ...

class LazyObject:
    _wrapped: Any = ...
    def __init__(self) -> None: ...
    __getattr__: Any = ...
    def __setattr__(self, name: str, value: object) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def _setup(self) -> None: ...
    def __reduce__(self) -> Union[Tuple[Callable, Tuple[object]], Tuple[Callable, Tuple[User]], Tuple[Callable, Tuple[Model]]]: ...
    def __copy__(self): ...
    def __deepcopy__(self, memo: Any): ...
    __bytes__: Any = ...
    __str__: Any = ...
    __bool__: Any = ...
    __dir__: Any = ...
    __class__: Any = ...
    __eq__: Any = ...
    __ne__: Any = ...
    __hash__: Any = ...
    __getitem__: Any = ...
    __setitem__: Any = ...
    __delitem__: Any = ...
    __iter__: Any = ...
    __len__: Any = ...
    __contains__: Any = ...

def unpickle_lazyobject(wrapped: Any): ...

class SimpleLazyObject(LazyObject):
    def __init__(self, func: Callable) -> None: ...
    _wrapped: Any = ...
    def _setup(self) -> None: ...
    def __repr__(self): ...
    def __copy__(self) -> object: ...
    def __deepcopy__(self, memo: Dict[Any, Any]) -> List[int]: ...

def partition(predicate: Any, values: Any): ...
