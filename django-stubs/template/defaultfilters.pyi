# Stubs for django.template.defaultfilters (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .base import Variable, VariableDoesNotExist
from .library import Library
from typing import Any, Optional

from datetime import date, time, timedelta
from decimal import Decimal
from django.utils.safestring import SafeText
from typing import Any, Callable, Dict, List, Optional, Tuple, Union

register: Any

def stringfilter(func: Any): ...
def addslashes(value: str) -> str: ...
def capfirst(value: str) -> str: ...
def escapejs_filter(value: str) -> SafeText: ...
def json_script(value: Dict[str, str], element_id: SafeText) -> SafeText: ...
def floatformat(
    text: Optional[Union[Decimal, str, float]], arg: Union[str, int] = ...
) -> str: ...
def iriencode(value: str) -> str: ...
def linenumbers(value: str, autoescape: bool = ...) -> SafeText: ...
def lower(value: str) -> str: ...
def make_list(value: str) -> List[str]: ...
def slugify(value: str) -> SafeText: ...
def stringformat(value: object, arg: str) -> str: ...
def title(value: str) -> str: ...
def truncatechars(value: str, arg: Union[SafeText, int]) -> str: ...
def truncatechars_html(value: str, arg: Union[str, int]) -> str: ...
def truncatewords(value: str, arg: Union[SafeText, int]) -> str: ...
def truncatewords_html(value: str, arg: int) -> str: ...
def upper(value: str) -> str: ...
def urlencode(value: str, safe: None = ...) -> str: ...
def urlize(value: str, autoescape: bool = ...) -> SafeText: ...
def urlizetrunc(
    value: str, limit: Union[SafeText, int], autoescape: bool = ...
) -> SafeText: ...
def wordcount(value: str) -> int: ...
def wordwrap(value: str, arg: Union[SafeText, int]) -> str: ...
def ljust(value: str, arg: Union[SafeText, int]) -> str: ...
def rjust(value: str, arg: Union[SafeText, int]) -> str: ...
def center(value: str, arg: SafeText) -> str: ...
def cut(value: str, arg: str) -> str: ...
def escape_filter(value: str) -> SafeText: ...
def force_escape(value: str) -> SafeText: ...
def linebreaks_filter(value: str, autoescape: bool = ...) -> SafeText: ...
def linebreaksbr(value: str, autoescape: bool = ...) -> SafeText: ...
def safe(value: str) -> SafeText: ...
def safeseq(value: List[str]) -> List[SafeText]: ...
def striptags(value: str) -> str: ...
def _property_resolver(arg: Union[str, int]) -> Callable: ...
def dictsort(
    value: Union[
        List[Dict[str, Union[str, int]]], List[Dict[str, str]], List[Tuple[str, str]]
    ],
    arg: Union[str, int],
) -> Union[
    List[Dict[str, Union[str, int]]], List[Dict[str, str]], List[Tuple[str, str]]
]: ...
def dictsortreversed(value: str, arg: str) -> str: ...
def first(value: Union[str, List[str]]) -> str: ...
def join(value: object, arg: str, autoescape: bool = ...) -> object: ...
def last(value: List[str]) -> str: ...
def length(value: Any) -> int: ...
def length_is(value: Any, arg: Union[SafeText, int]) -> Union[bool, str]: ...
def random(value: Union[List[str], List[SafeText]]) -> str: ...
def slice_filter(value: str, arg: str) -> str: ...
def unordered_list(value: Any, autoescape: bool = ...) -> SafeText: ...
def add(
    value: Union[date, Tuple[int, int], str, int],
    arg: Union[SafeText, Tuple[int, int], timedelta, int],
) -> Union[str, Tuple[int, int, int, int], date, int]: ...
def get_digit(value: int, arg: int) -> int: ...
def date(value: Optional[Union[time, date, str]], arg: Optional[str] = ...) -> str: ...
def time(value: Optional[Union[time, str, date]], arg: Optional[str] = ...) -> str: ...
def timesince_filter(value: Optional[date], arg: Optional[date] = ...) -> str: ...
def timeuntil_filter(value: date, arg: Optional[date] = ...) -> str: ...
def default(
    value: Optional[Union[int, str]], arg: Union[SafeText, int]
) -> Union[int, str]: ...
def default_if_none(value: Optional[str], arg: Union[str, int]) -> Union[str, int]: ...
def divisibleby(value: int, arg: int) -> bool: ...
def yesno(value: Optional[int], arg: Optional[str] = ...) -> Optional[str]: ...
def filesizeformat(bytes_: Union[str, int]) -> str: ...
def pluralize(value: object, arg: str = ...) -> str: ...
def phone2numeric_filter(value: str) -> str: ...
def pprint(value: object) -> str: ...
