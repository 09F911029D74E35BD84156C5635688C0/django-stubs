# Stubs for django.template.defaulttags (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .base import (
    BLOCK_TAG_END,
    BLOCK_TAG_START,
    COMMENT_TAG_END,
    COMMENT_TAG_START,
    Context,
    FILTER_SEPARATOR,
    Node,
    NodeList,
    SINGLE_BRACE_END,
    SINGLE_BRACE_START,
    TemplateSyntaxError,
    VARIABLE_ATTRIBUTE_SEPARATOR,
    VARIABLE_TAG_END,
    VARIABLE_TAG_START,
    VariableDoesNotExist,
    kwarg_re,
    render_value_in_context,
    token_kwargs,
)
from .defaultfilters import date
from .library import Library
from .smartif import IfParser, Literal
from collections import namedtuple
from typing import Any, Optional

from datetime import date
from django.template.base import FilterExpression, NodeList, Parser, Token
from django.template.context import Context, RequestContext
from django.template.library import Library
from django.utils.safestring import SafeText
from typing import Any, Dict, List, Optional, Tuple, Union

register: Any

class AutoEscapeControlNode(Node):
    def __init__(self, setting: bool, nodelist: NodeList) -> None: ...
    def render(self, context: Context) -> SafeText: ...

class CommentNode(Node):
    def render(self, context: Context) -> str: ...

class CsrfTokenNode(Node):
    def render(self, context: RequestContext) -> SafeText: ...

class CycleNode(Node):
    cyclevars: Any = ...
    variable_name: Any = ...
    silent: Any = ...
    def __init__(
        self,
        cyclevars: List[FilterExpression],
        variable_name: Optional[str] = ...,
        silent: bool = ...,
    ) -> None: ...
    def render(self, context: Context) -> str: ...
    def reset(self, context: Context) -> None: ...

class DebugNode(Node):
    def render(self, context: Any): ...

class FilterNode(Node):
    def __init__(self, filter_expr: FilterExpression, nodelist: NodeList) -> None: ...
    def render(self, context: Context): ...

class FirstOfNode(Node):
    vars: Any = ...
    asvar: Any = ...
    def __init__(
        self, variables: List[FilterExpression], asvar: Optional[str] = ...
    ) -> None: ...
    def render(self, context: Context) -> str: ...

class ForNode(Node):
    child_nodelists: Any = ...
    is_reversed: Any = ...
    nodelist_loop: Any = ...
    nodelist_empty: Any = ...
    def __init__(
        self,
        loopvars: List[str],
        sequence: FilterExpression,
        is_reversed: bool,
        nodelist_loop: NodeList,
        nodelist_empty: Optional[NodeList] = ...,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def render(self, context: Context) -> SafeText: ...

class IfChangedNode(Node):
    child_nodelists: Any = ...
    _varlist: Any = ...
    def __init__(
        self, nodelist_true: NodeList, nodelist_false: NodeList, *varlist: Any
    ) -> None: ...
    def render(self, context: Context) -> str: ...
    def _get_context_stack_frame(self, context: Context) -> Any: ...

class IfEqualNode(Node):
    child_nodelists: Any = ...
    negate: Any = ...
    def __init__(
        self,
        var1: FilterExpression,
        var2: FilterExpression,
        nodelist_true: NodeList,
        nodelist_false: NodeList,
        negate: bool,
    ) -> None: ...
    def __repr__(self): ...
    def render(self, context: Context) -> SafeText: ...

class IfNode(Node):
    conditions_nodelists: Any = ...
    def __init__(
        self,
        conditions_nodelists: Union[
            List[Tuple[TemplateLiteral, NodeList]],
            List[Union[Tuple[TemplateLiteral, NodeList], Tuple[None, NodeList]]],
        ],
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __iter__(self) -> None: ...
    @property
    def nodelist(self) -> NodeList: ...
    def render(self, context: Context) -> str: ...

class LoremNode(Node):
    def __init__(self, count: FilterExpression, method: str, common: bool) -> None: ...
    def render(self, context: Context) -> str: ...

GroupedResult = namedtuple("GroupedResult", ["grouper", "list"])

class RegroupNode(Node):
    var_name: Any = ...
    def __init__(
        self, target: FilterExpression, expression: FilterExpression, var_name: str
    ) -> None: ...
    def resolve_expression(
        self, obj: Dict[str, Union[str, int, date, List[str]]], context: Context
    ) -> Union[int, str]: ...
    def render(self, context: Context) -> str: ...

class LoadNode(Node):
    def render(self, context: Context) -> str: ...

class NowNode(Node):
    format_string: Any = ...
    asvar: Any = ...
    def __init__(self, format_string: str, asvar: None = ...) -> None: ...
    def render(self, context: Context) -> str: ...

class ResetCycleNode(Node):
    node: Any = ...
    def __init__(self, node: CycleNode) -> None: ...
    def render(self, context: Context) -> str: ...

class SpacelessNode(Node):
    nodelist: Any = ...
    def __init__(self, nodelist: NodeList) -> None: ...
    def render(self, context: Context) -> str: ...

class TemplateTagNode(Node):
    mapping: Any = ...
    tagtype: Any = ...
    def __init__(self, tagtype: str) -> None: ...
    def render(self, context: Context) -> str: ...

class URLNode(Node):
    view_name: Any = ...
    args: Any = ...
    kwargs: Any = ...
    asvar: Any = ...
    def __init__(
        self,
        view_name: FilterExpression,
        args: List[FilterExpression],
        kwargs: Dict[str, FilterExpression],
        asvar: Optional[str],
    ) -> None: ...
    def render(self, context: Context) -> str: ...

class VerbatimNode(Node):
    content: Any = ...
    def __init__(self, content: SafeText) -> None: ...
    def render(self, context: Context) -> SafeText: ...

class WidthRatioNode(Node):
    val_expr: Any = ...
    max_expr: Any = ...
    max_width: Any = ...
    asvar: Any = ...
    def __init__(
        self,
        val_expr: FilterExpression,
        max_expr: FilterExpression,
        max_width: FilterExpression,
        asvar: Optional[str] = ...,
    ) -> None: ...
    def render(self, context: Context) -> str: ...

class WithNode(Node):
    nodelist: Any = ...
    extra_context: Any = ...
    def __init__(
        self,
        var: None,
        name: None,
        nodelist: NodeList,
        extra_context: Dict[str, FilterExpression] = ...,
    ) -> None: ...
    def __repr__(self): ...
    def render(self, context: Context): ...

def autoescape(parser: Parser, token: Token) -> AutoEscapeControlNode: ...
def comment(parser: Parser, token: Token) -> CommentNode: ...
def cycle(parser: Parser, token: Token) -> CycleNode: ...
def csrf_token(parser: Parser, token: Token) -> CsrfTokenNode: ...
def debug(parser: Any, token: Any): ...
def do_filter(parser: Parser, token: Token) -> FilterNode: ...
def firstof(parser: Parser, token: Token) -> FirstOfNode: ...
def do_for(parser: Parser, token: Token) -> ForNode: ...
def do_ifequal(parser: Parser, token: Token, negate: bool) -> IfEqualNode: ...
def ifequal(parser: Parser, token: Token) -> IfEqualNode: ...
def ifnotequal(parser: Parser, token: Token) -> IfEqualNode: ...

class TemplateLiteral(Literal):
    value: Any = ...
    text: Any = ...
    def __init__(self, value: FilterExpression, text: str) -> None: ...
    def display(self) -> str: ...
    def eval(self, context: Context) -> Any: ...

class TemplateIfParser(IfParser):
    error_class: Any = ...
    template_parser: Any = ...
    def __init__(self, parser: Parser, *args: Any, **kwargs: Any) -> None: ...
    def create_var(self, value: str) -> TemplateLiteral: ...

def do_if(parser: Parser, token: Token) -> IfNode: ...
def ifchanged(parser: Parser, token: Token) -> IfChangedNode: ...
def find_library(parser: Parser, name: str) -> Library: ...
def load_from_library(library: Library, label: str, names: List[str]) -> Library: ...
def load(parser: Parser, token: Token) -> LoadNode: ...
def lorem(parser: Parser, token: Token) -> LoremNode: ...
def now(parser: Parser, token: Token) -> NowNode: ...
def regroup(parser: Parser, token: Token) -> RegroupNode: ...
def resetcycle(parser: Parser, token: Token) -> ResetCycleNode: ...
def spaceless(parser: Parser, token: Token) -> SpacelessNode: ...
def templatetag(parser: Parser, token: Token) -> TemplateTagNode: ...
def url(parser: Parser, token: Token) -> URLNode: ...
def verbatim(parser: Parser, token: Token) -> VerbatimNode: ...
def widthratio(parser: Parser, token: Token) -> WidthRatioNode: ...
def do_with(parser: Parser, token: Token) -> WithNode: ...
