# Stubs for django.template.library (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .base import Node, Template, token_kwargs
from .exceptions import TemplateSyntaxError
from typing import Any, Optional

from django.template.base import FilterExpression, Parser, Template
from django.template.context import Context
from django.utils.safestring import SafeText
from typing import Any, Callable, Dict, List, Optional, Tuple, Union
class InvalidTemplateLibrary(Exception): ...

class Library:
    filters: Any = ...
    tags: Any = ...
    def __init__(self) -> None: ...
    def tag(self, name: Optional[Union[str, Callable]] = ..., compile_function: Optional[Union[str, Callable]] = ...) -> Callable: ...
    def tag_function(self, func: Callable) -> Callable: ...
    def filter(self, name: Optional[Union[str, Callable]] = ..., filter_func: Optional[Callable] = ..., **flags: Any) -> Callable: ...
    def filter_function(self, func: Callable, **flags: Any) -> Callable: ...
    def simple_tag(self, func: Optional[Callable] = ..., takes_context: Optional[bool] = ..., name: Optional[str] = ...) -> Callable: ...
    def inclusion_tag(self, filename: Union[str, Template], func: None = ..., takes_context: Optional[bool] = ..., name: Optional[str] = ...) -> Callable: ...

class TagHelperNode(Node):
    func: Any = ...
    takes_context: Any = ...
    args: Any = ...
    kwargs: Any = ...
    def __init__(self, func: Callable, takes_context: Optional[bool], args: List[FilterExpression], kwargs: Dict[Any, Any]) -> None: ...
    def get_resolved_arguments(self, context: Context) -> Any: ...

class SimpleNode(TagHelperNode):
    target_var: Any = ...
    def __init__(self, func: Callable, takes_context: Optional[bool], args: List[FilterExpression], kwargs: Dict[str, FilterExpression], target_var: Optional[str]) -> None: ...
    def render(self, context: Context) -> str: ...

class InclusionNode(TagHelperNode):
    filename: Any = ...
    def __init__(self, func: Callable, takes_context: Optional[bool], args: List[FilterExpression], kwargs: Dict[Any, Any], filename: Optional[Union[str, Template]]) -> None: ...
    def render(self, context: Context) -> SafeText: ...

def parse_bits(parser: Parser, bits: List[str], params: List[str], varargs: Optional[str], varkw: None, defaults: Optional[Union[Tuple[bool, None], Tuple[str]]], kwonly: List[str], kwonly_defaults: Optional[Dict[str, int]], takes_context: Optional[bool], name: str) -> Union[Tuple[List[Any], Dict[Any, Any]], Tuple[List[FilterExpression], Dict[str, FilterExpression]], Tuple[List[Any], Dict[str, FilterExpression]], Tuple[List[FilterExpression], Dict[Any, Any]]]: ...
def import_library(name: str) -> Library: ...
