from itertools import cycle
from typing import Any, Dict, Iterator, List, Optional, Union

from django.contrib.admin.templatetags.base import InclusionAdminNode
from django.core.handlers.wsgi import WSGIRequest
from django.template.base import Node, Origin, Template
from django.template.defaulttags import CycleNode
from django.template.loader_tags import BlockContext
from django.utils.functional import SimpleLazyObject


class ContextPopException(Exception): ...

class ContextDict(dict):
    context: Any = ...
    def __init__(
        self, context: BaseContext, *args: Any, **kwargs: Any
    ) -> None: ...
    def __enter__(self) -> ContextDict: ...
    def __exit__(self, *args: Any, **kwargs: Any) -> None: ...

class BaseContext:
    def __init__(self, dict_: Any = ...) -> None: ...
    def __copy__(self) -> BaseContext: ...
    def __iter__(self) -> None: ...
    def push(self, *args: Any, **kwargs: Any) -> ContextDict: ...
    def pop(self) -> ContextDict: ...
    def __setitem__(self, key: Union[str, Node], value: Any) -> None: ...
    def set_upward(self, key: Any, value: Any) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def __delitem__(self, key: Any) -> None: ...
    def __contains__(self, key: str) -> bool: ...
    def get(
        self, key: str, otherwise: Optional[int] = ...
    ) -> Union[SimpleLazyObject, int]: ...
    def setdefault(
        self, key: str, default: List[Origin] = ...
    ) -> List[Origin]: ...
    def new(self, values: Any = ...) -> RequestContext: ...
    def flatten(self): ...
    def __eq__(self, other: Any): ...

class Context(BaseContext):
    dicts: List
    autoescape: bool = ...
    use_l10n: Optional[bool] = ...
    use_tz: None = ...
    template_name: Optional[str] = ...
    render_context: django.template.context.RenderContext = ...
    template: Optional[django.template.base.Template] = ...
    def __init__(
        self,
        dict_: Any = ...,
        autoescape: bool = ...,
        use_l10n: None = ...,
        use_tz: None = ...,
    ) -> None: ...
    def bind_template(self, template: Template) -> Iterator[None]: ...
    def __copy__(self) -> Context: ...
    def update(self, other_dict: Dict[str, Any]) -> ContextDict: ...

class RenderContext(BaseContext):
    dicts: Union[
        List[
            Dict[
                Union[str, django.template.loader_tags.IncludeNode],
                Union[bool, None, Dict[str, django.template.base.Template]],
            ]
        ],
        List[
            Union[
                Dict[
                    Union[str, django.template.loader_tags.IncludeNode],
                    Union[bool, None, Dict[Any, Any]],
                ],
                django.template.context.ContextDict,
            ]
        ],
        List[
            Union[
                Dict[str, Union[bool, None]],
                Dict[str, str],
                django.template.context.ContextDict,
            ]
        ],
    ]
    template: Optional[django.template.base.Template] = ...
    def __iter__(self) -> None: ...
    def __contains__(self, key: Union[str, CycleNode]) -> bool: ...
    def get(
        self, key: Union[str, InclusionAdminNode], otherwise: None = ...
    ) -> Optional[Union[BlockContext, Template]]: ...
    def __getitem__(
        self, key: Union[str, CycleNode]
    ) -> Union[List[Origin], BlockContext, cycle]: ...
    def push_state(
        self, template: Template, isolated_context: bool = ...
    ) -> Iterator[None]: ...

class RequestContext(Context):
    autoescape: bool
    dicts: List
    render_context: django.template.context.RenderContext
    template_name: Optional[str]
    use_l10n: None
    use_tz: None
    request: django.http.request.HttpRequest = ...
    def __init__(
        self,
        request: WSGIRequest,
        dict_: None = ...,
        processors: None = ...,
        use_l10n: None = ...,
        use_tz: None = ...,
        autoescape: bool = ...,
    ) -> None: ...
    template: Optional[django.template.base.Template] = ...
    def bind_template(self, template: Template) -> Iterator[None]: ...
    def new(self, values: Any = ...) -> RequestContext: ...

def make_context(
    context: Dict[str, Any], request: Optional[WSGIRequest] = ..., **kwargs: Any
) -> Context: ...
