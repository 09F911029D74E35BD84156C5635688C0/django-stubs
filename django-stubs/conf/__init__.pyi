from typing import Any, List, Optional, Union

from django.utils.functional import LazyObject

ENVIRONMENT_VARIABLE: str

class LazySettings(LazyObject):
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def configure(self, default_settings: Any = ..., **options: Any) -> Any: ...
    @property
    def configured(self) -> bool: ...

class Settings:
    FORCE_SCRIPT_NAME: None
    INSTALLED_APPS: List[Any]
    LOGGING: Dict[Any, Any]
    LOGGING_CONFIG: str
    SETTINGS_MODULE: Any = ...
    def __init__(self, settings_module: str) -> None: ...
    def is_overridden(self, setting: str) -> bool: ...

class UserSettingsHolder:
    SETTINGS_MODULE: Any = ...
    default_settings: django.conf.Settings = ...
    def __init__(
        self, default_settings: Union[Settings, UserSettingsHolder]
    ) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def __dir__(self) -> List[str]: ...
    def is_overridden(self, setting: str) -> bool: ...

settings: Any
