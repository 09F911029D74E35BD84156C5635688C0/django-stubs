# Stubs for django.contrib.staticfiles.storage (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.core.files.storage import FileSystemStorage
from django.utils.functional import LazyObject
from typing import Any, Optional

from collections import OrderedDict
from django.core.cache import DefaultCacheProxy
from django.core.files.base import File
from django.utils.safestring import SafeText
from typing import Callable, Dict, Iterator, List, Optional, Tuple, Union

class StaticFilesStorage(FileSystemStorage):
    base_location: Any = ...
    location: Any = ...
    def __init__(
        self, location: Optional[str] = ..., base_url: None = ..., *args: Any, **kwargs: Any
    ) -> None: ...
    def path(self, name: str) -> str: ...

class HashedFilesMixin:
    default_template: str = ...
    max_post_process_passes: int = ...
    patterns: Any = ...
    _patterns: Any = ...
    hashed_files: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def file_hash(self, name: str, content: File = ...) -> str: ...
    def hashed_name(
        self, name: str, content: Optional[File] = ..., filename: Optional[str] = ...
    ) -> str: ...
    def _url(
        self,
        hashed_name_func: Callable,
        name: str,
        force: bool = ...,
        hashed_files: Optional[OrderedDict] = ...,
    ) -> str: ...
    def url(self, name: SafeText, force: bool = ...) -> str: ...
    def url_converter(
        self, name: str, hashed_files: OrderedDict, template: str = ...
    ) -> Callable: ...
    def post_process(
        self, paths: OrderedDict, dry_run: bool = ..., **options: Any
    ) -> Iterator[Tuple[str, str, bool]]: ...
    def _post_process(
        self,
        paths: Union[OrderedDict, Dict[str, Tuple[FileSystemStorage, str]]],
        adjustable_paths: List[str],
        hashed_files: OrderedDict,
    ) -> Iterator[Tuple[str, str, bool, bool]]: ...
    def clean_name(self, name: str) -> str: ...
    def hash_key(self, name: str) -> str: ...
    def _stored_name(self, name: str, hashed_files: OrderedDict) -> str: ...
    def stored_name(self, name: SafeText) -> str: ...

class ManifestFilesMixin(HashedFilesMixin):
    manifest_version: str = ...
    manifest_name: str = ...
    manifest_strict: bool = ...
    hashed_files: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def read_manifest(self) -> None: ...
    def load_manifest(self) -> OrderedDict: ...
    def post_process(self, *args: Any, **kwargs: Any) -> None: ...
    def save_manifest(self) -> None: ...
    def stored_name(self, name: SafeText) -> str: ...

class _MappingCache:
    cache: Any = ...
    def __init__(self, cache: DefaultCacheProxy) -> None: ...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __getitem__(self, key: str) -> str: ...
    def clear(self) -> None: ...
    def update(self, data: OrderedDict) -> None: ...
    def get(self, key: str, default: None = ...) -> Optional[str]: ...

class CachedFilesMixin(HashedFilesMixin):
    hashed_files: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def hash_key(self, name: str) -> str: ...

class CachedStaticFilesStorage(CachedFilesMixin, StaticFilesStorage): ...
class ManifestStaticFilesStorage(ManifestFilesMixin, StaticFilesStorage): ...

class ConfiguredStorage(LazyObject):
    _wrapped: Any = ...
    def _setup(self) -> None: ...

staticfiles_storage: Any
