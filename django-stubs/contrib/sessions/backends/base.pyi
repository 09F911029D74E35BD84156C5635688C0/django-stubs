# Stubs for django.contrib.sessions.backends.base (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

from datetime import datetime, timedelta
from django.db.models.base import Model
from typing import Dict, Optional, Union
VALID_KEY_CHARS: Any

class CreateError(Exception): ...
class UpdateError(Exception): ...

class SessionBase:
    TEST_COOKIE_NAME: str = ...
    TEST_COOKIE_VALUE: str = ...
    __not_given: Any = ...
    _session_key: Any = ...
    accessed: bool = ...
    modified: bool = ...
    serializer: Any = ...
    def __init__(self, session_key: Optional[str] = ...) -> None: ...
    def __contains__(self, key: str) -> bool: ...
    def __getitem__(self, key: str) -> Union[str, Model, int]: ...
    def __setitem__(self, key: str, value: Union[str, datetime, int]) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def get(self, key: str, default: Optional[str] = ...) -> Optional[Union[str, datetime, int]]: ...
    def pop(self, key: str, default: object = ...) -> Union[str, int]: ...
    def setdefault(self, key: str, value: str) -> str: ...
    def set_test_cookie(self) -> None: ...
    def test_cookie_worked(self) -> bool: ...
    def delete_test_cookie(self) -> None: ...
    def _hash(self, value: bytes) -> str: ...
    def encode(self, session_dict: Dict[str, Union[str, int, datetime]]) -> str: ...
    def decode(self, session_data: Union[str, bytes]) -> Dict[str, Union[str, int]]: ...
    def update(self, dict_: Dict[str, int]) -> None: ...
    def has_key(self, key: Any): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    _session_cache: Any = ...
    def clear(self) -> None: ...
    def is_empty(self) -> bool: ...
    def _get_new_session_key(self) -> str: ...
    def _get_or_create_session_key(self) -> str: ...
    def _validate_session_key(self, key: Optional[str]) -> Optional[Union[str, bool]]: ...
    def _get_session_key(self) -> Optional[str]: ...
    __session_key: Any = ...
    def _set_session_key(self, value: Optional[str]) -> None: ...
    session_key: Any = ...
    def _get_session(self, no_load: bool = ...) -> Dict[str, Union[str, int, datetime, Model]]: ...
    _session: Any = ...
    def get_expiry_age(self, **kwargs: Any) -> int: ...
    def get_expiry_date(self, **kwargs: Any) -> datetime: ...
    def set_expiry(self, value: Optional[Union[datetime, int, timedelta]]) -> None: ...
    def get_expire_at_browser_close(self) -> bool: ...
    def flush(self) -> None: ...
    def cycle_key(self) -> None: ...
    def exists(self, session_key: Any) -> None: ...
    def create(self) -> None: ...
    def save(self, must_create: bool = ...) -> None: ...
    def delete(self, session_key: Optional[Any] = ...) -> None: ...
    def load(self) -> None: ...
    @classmethod
    def clear_expired(cls) -> None: ...
