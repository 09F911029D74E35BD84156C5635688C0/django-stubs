from django.contrib.contenttypes.models import ContentType
from django.core.checks.messages import Error
from django.db.models.base import Model
from django.db.models.fields import AutoField, PositiveIntegerField
from django.db.models.fields.related import OneToOneField
from django.db.models.query import QuerySet
from django.db.models.query_utils import FilteredRelation, PathInfo
from django.db.models.sql.where import WhereNode
from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union

class GenericForeignKey:
    def __get__(
        self, instance: Optional[Model], cls: Type[Model] = ...
    ) -> Optional[Union[Model, GenericForeignKey]]: ...
    def __init__(
        self, ct_field: str = ..., fk_field: str = ..., for_concrete_model: bool = ...
    ) -> None: ...
    def __set__(self, instance: Model, value: Optional[Model]) -> None: ...
    def __str__(self) -> str: ...
    def _check_content_type_field(self) -> List[Error]: ...
    def _check_field_name(self) -> List[Any]: ...
    def _check_object_id_field(self) -> List[Any]: ...
    def check(self, **kwargs) -> List[Error]: ...
    def contribute_to_class(self, cls: Type[Model], name: str, **kwargs) -> None: ...
    def get_cache_name(self) -> str: ...
    def get_content_type(
        self,
        obj: Optional[Model] = ...,
        id: Optional[int] = ...,
        using: Optional[str] = ...,
    ) -> ContentType: ...
    def get_filter_kwargs_for_object(
        self, obj: Model
    ) -> Dict[str, Optional[Union[ContentType, int]]]: ...
    def get_forward_related_filter(self, obj: Model) -> Dict[str, int]: ...
    def get_prefetch_queryset(
        self, instances: Union[List[Model], QuerySet], queryset: Optional[QuerySet] = ...
    ) -> Tuple[List[Model], Callable, Callable, bool, str, bool]: ...

class GenericRel:
    def __init__(
        self,
        field: GenericRelation,
        to: Union[Type[Model], str],
        related_name: None = ...,
        related_query_name: Optional[str] = ...,
        limit_choices_to: None = ...,
    ) -> None: ...

class GenericRelation:
    def __init__(
        self,
        to: Union[Type[Model], str],
        object_id_field: str = ...,
        content_type_field: str = ...,
        for_concrete_model: bool = ...,
        related_query_name: Optional[str] = ...,
        limit_choices_to: None = ...,
        **kwargs,
    ) -> None: ...
    def _check_generic_foreign_key_existence(self) -> List[Any]: ...
    def _get_path_info_with_parent(self, filtered_relation: None) -> List[PathInfo]: ...
    def _is_matching_generic_foreign_key(
        self, field: Optional[Union[GenericForeignKey, GenericRelation]]
    ) -> bool: ...
    def bulk_related_objects(self, objs: List[Model], using: str = ...) -> QuerySet: ...
    def check(self, **kwargs) -> List[Error]: ...
    def contribute_to_class(self, cls: Type[Model], name: str, **kwargs) -> None: ...
    def get_content_type(self) -> ContentType: ...
    def get_extra_restriction(
        self, where_class: Type[WhereNode], alias: Optional[str], remote_alias: str
    ) -> WhereNode: ...
    def get_internal_type(self) -> str: ...
    def get_path_info(
        self, filtered_relation: Optional[FilteredRelation] = ...
    ) -> List[PathInfo]: ...
    def get_reverse_path_info(self, filtered_relation: None = ...) -> List[PathInfo]: ...
    def resolve_related_fields(
        self
    ) -> Union[
        List[Tuple[PositiveIntegerField, related.OneToOneField]],
        List[Tuple[PositiveIntegerField, AutoField]],
    ]: ...
    def set_attributes_from_rel(self) -> None: ...
