# Stubs for django.test.runner (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import unittest
from typing import Any, Optional

from django.db.backends.dummy.base import DatabaseWrapper
from django.db.backends.sqlite3.base import DatabaseWrapper
from django.test.testcases import SimpleTestCase, TestCase
from django.utils.datastructures import OrderedSet
from typing import Any, Dict, List, Optional, Set, Tuple, Type, Union
from unittest.case import _SubTest
from unittest.runner import TextTestResult
from unittest.suite import TestSuite
class DebugSQLTextTestResult(unittest.TextTestResult):
    logger: Any = ...
    def __init__(self, stream: Any, descriptions: Any, verbosity: Any) -> None: ...
    debug_sql_stream: Any = ...
    handler: Any = ...
    def startTest(self, test: TestCase) -> None: ...
    def stopTest(self, test: TestCase) -> None: ...
    def addError(self, test: Any, err: Any) -> None: ...
    def addFailure(self, test: Any, err: Any) -> None: ...
    def addSubTest(self, test: TestCase, subtest: _SubTest, err: None) -> None: ...
    def printErrorList(self, flavour: str, errors: List[Union[Tuple[TestCase, str, str], Tuple[_SubTest, str, str]]]) -> None: ...

class RemoteTestResult:
    events: Any = ...
    failfast: bool = ...
    shouldStop: bool = ...
    testsRun: int = ...
    def __init__(self) -> None: ...
    @property
    def test_index(self): ...
    def _confirm_picklable(self, obj: Any) -> None: ...
    def _print_unpicklable_subtest(self, test: Any, subtest: Any, pickle_exc: Any) -> None: ...
    def check_picklable(self, test: Any, err: Any) -> None: ...
    def check_subtest_picklable(self, test: Any, subtest: Any) -> None: ...
    def stop_if_failfast(self) -> None: ...
    def stop(self) -> None: ...
    def startTestRun(self) -> None: ...
    def stopTestRun(self) -> None: ...
    def startTest(self, test: Any) -> None: ...
    def stopTest(self, test: Any) -> None: ...
    def addError(self, test: Any, err: Any) -> None: ...
    def addFailure(self, test: Any, err: Any) -> None: ...
    def addSubTest(self, test: Any, subtest: Any, err: Any) -> None: ...
    def addSuccess(self, test: Any) -> None: ...
    def addSkip(self, test: Any, reason: Any) -> None: ...
    def addExpectedFailure(self, test: Any, err: Any) -> None: ...
    def addUnexpectedSuccess(self, test: Any) -> None: ...

class RemoteTestRunner:
    resultclass: Any = ...
    failfast: Any = ...
    def __init__(self, failfast: bool = ..., resultclass: Optional[Any] = ...) -> None: ...
    def run(self, test: Any): ...

def default_test_processes() -> int: ...

_worker_id: int

def _init_worker(counter: Any) -> None: ...
def _run_subsuite(args: Any): ...

class ParallelTestSuite(unittest.TestSuite):
    init_worker: Any = ...
    run_subsuite: Any = ...
    runner_class: Any = ...
    subsuites: Any = ...
    processes: Any = ...
    failfast: Any = ...
    def __init__(self, suite: Any, processes: Any, failfast: bool = ...) -> None: ...
    def run(self, result: Any): ...

class DiscoverRunner:
    test_suite: Any = ...
    parallel_test_suite: Any = ...
    test_runner: Any = ...
    test_loader: Any = ...
    reorder_by: Any = ...
    pattern: Any = ...
    top_level: Any = ...
    verbosity: Any = ...
    interactive: Any = ...
    failfast: Any = ...
    keepdb: Any = ...
    reverse: Any = ...
    debug_mode: Any = ...
    debug_sql: Any = ...
    parallel: Any = ...
    tags: Any = ...
    exclude_tags: Any = ...
    def __init__(self, pattern: None = ..., top_level: None = ..., verbosity: int = ..., interactive: bool = ..., failfast: bool = ..., keepdb: bool = ..., reverse: bool = ..., debug_mode: bool = ..., debug_sql: bool = ..., parallel: int = ..., tags: Optional[List[str]] = ..., exclude_tags: None = ..., **kwargs: Any) -> None: ...
    @classmethod
    def add_arguments(cls, parser: Any) -> None: ...
    def setup_test_environment(self, **kwargs: Any) -> None: ...
    def build_suite(self, test_labels: Union[Tuple[str, str], List[str], Tuple[str]] = ..., extra_tests: None = ..., **kwargs: Any) -> TestSuite: ...
    def setup_databases(self, **kwargs: Any) -> Union[List[Tuple[DatabaseWrapper, str, bool]], List[Tuple[DatabaseWrapper, str, bool]]]: ...
    def get_resultclass(self) -> None: ...
    def get_test_runner_kwargs(self) -> Dict[str, Optional[int]]: ...
    def run_checks(self) -> None: ...
    def run_suite(self, suite: TestSuite, **kwargs: Any) -> TextTestResult: ...
    def teardown_databases(self, old_config: Union[List[Tuple[DatabaseWrapper, str, bool]], List[Tuple[DatabaseWrapper, str, bool]]], **kwargs: Any) -> None: ...
    def teardown_test_environment(self, **kwargs: Any) -> None: ...
    def suite_result(self, suite: TestSuite, result: TextTestResult, **kwargs: Any) -> int: ...
    def run_tests(self, test_labels: List[str], extra_tests: List[Any] = ..., **kwargs: Any) -> int: ...

def is_discoverable(label: str) -> bool: ...
def reorder_suite(suite: TestSuite, classes: Tuple[Type[TestCase], Type[SimpleTestCase]], reverse: bool = ...) -> TestSuite: ...
def partition_suite_by_type(suite: TestSuite, classes: Tuple[Type[TestCase], Type[SimpleTestCase]], bins: List[OrderedSet], reverse: bool = ...) -> None: ...
def partition_suite_by_case(suite: Any): ...
def filter_tests_by_tags(suite: TestSuite, tags: Set[str], exclude_tags: Set[str]) -> TestSuite: ...
