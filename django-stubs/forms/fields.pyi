# Stubs for django.forms.fields (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

from datetime import date, datetime, time, timedelta
from decimal import Decimal
from django.core.files.uploadedfile import SimpleUploadedFile
from django.db.models.fields.files import FieldFile
from django.forms.boundfield import BoundField
from django.forms.forms import Form
from django.forms.models import ModelForm
from django.forms.widgets import ClearableFileInput, Input, Textarea, Widget
from typing import Any, Callable, Dict, List, Optional, Tuple, Union
class Field:
    widget: Any = ...
    hidden_widget: Any = ...
    default_validators: Any = ...
    default_error_messages: Any = ...
    empty_values: Any = ...
    show_hidden_initial: Any = ...
    help_text: Any = ...
    disabled: Any = ...
    label_suffix: Any = ...
    localize: Any = ...
    error_messages: Any = ...
    validators: Any = ...
    def __init__(self, *, required: bool = ..., widget: Optional[Any] = ..., label: Optional[Any] = ..., initial: Optional[Any] = ..., help_text: str = ..., error_messages: Optional[Any] = ..., show_hidden_initial: bool = ..., validators: Any = ..., localize: bool = ..., disabled: bool = ..., label_suffix: Optional[Any] = ...) -> None: ...
    def prepare_value(self, value: Any) -> Any: ...
    def to_python(self, value: Any) -> Any: ...
    def validate(self, value: Any) -> None: ...
    def run_validators(self, value: Any) -> None: ...
    def clean(self, value: Any) -> Any: ...
    def bound_data(self, data: Any, initial: Optional[Union[str, float, datetime]]) -> Any: ...
    def widget_attrs(self, widget: Widget) -> Dict[Any, Any]: ...
    def has_changed(self, initial: Any, data: Optional[str]) -> bool: ...
    def get_bound_field(self, form: Union[Form, ModelForm], field_name: str) -> BoundField: ...
    def __deepcopy__(self, memo: Dict[int, Any]) -> Field: ...

class CharField(Field):
    max_length: Any = ...
    min_length: Any = ...
    strip: Any = ...
    empty_value: Any = ...
    def __init__(self, *, max_length: Optional[Any] = ..., min_length: Optional[Any] = ..., strip: bool = ..., empty_value: str = ..., **kwargs: Any) -> None: ...
    def to_python(self, value: Optional[Union[int, str, Tuple]]) -> Optional[str]: ...
    def widget_attrs(self, widget: Union[Textarea, Input]) -> Dict[str, str]: ...

class IntegerField(Field):
    widget: Any = ...
    default_error_messages: Any = ...
    re_decimal: Any = ...
    def __init__(self, *, max_value: Optional[Any] = ..., min_value: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def to_python(self, value: Optional[Union[str, float]]) -> Optional[int]: ...
    def widget_attrs(self, widget: Input) -> Dict[str, Union[int, Decimal]]: ...

class FloatField(IntegerField):
    default_error_messages: Any = ...
    def to_python(self, value: str) -> Optional[float]: ...
    def validate(self, value: Optional[float]) -> None: ...
    def widget_attrs(self, widget: Input) -> Dict[str, Union[int, str]]: ...

class DecimalField(IntegerField):
    default_error_messages: Any = ...
    def __init__(self, *, max_value: Optional[Any] = ..., min_value: Optional[Any] = ..., max_digits: Optional[Any] = ..., decimal_places: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def to_python(self, value: Optional[Union[str, float]]) -> Optional[Decimal]: ...
    def validate(self, value: Decimal) -> None: ...
    def widget_attrs(self, widget: Widget) -> Dict[str, str]: ...

class BaseTemporalField(Field):
    input_formats: Any = ...
    def __init__(self, *, input_formats: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def to_python(self, value: str) -> Union[date, time]: ...
    def strptime(self, value: Any, format: Any) -> None: ...

class DateField(BaseTemporalField):
    widget: Any = ...
    input_formats: Any = ...
    default_error_messages: Any = ...
    def to_python(self, value: Optional[Union[date, str]]) -> Optional[date]: ...
    def strptime(self, value: str, format: str) -> date: ...

class TimeField(BaseTemporalField):
    widget: Any = ...
    input_formats: Any = ...
    default_error_messages: Any = ...
    def to_python(self, value: Optional[Union[str, time]]) -> Optional[time]: ...
    def strptime(self, value: str, format: str) -> time: ...

class DateTimeField(BaseTemporalField):
    widget: Any = ...
    input_formats: Any = ...
    default_error_messages: Any = ...
    def prepare_value(self, value: Optional[datetime]) -> Optional[datetime]: ...
    def to_python(self, value: Optional[Union[str, date]]) -> Optional[datetime]: ...
    def strptime(self, value: str, format: str) -> datetime: ...

class DurationField(Field):
    default_error_messages: Any = ...
    def prepare_value(self, value: Optional[timedelta]) -> Optional[str]: ...
    def to_python(self, value: Union[str, int]) -> timedelta: ...

class RegexField(CharField):
    def __init__(self, regex: str, **kwargs: Any) -> None: ...
    def _get_regex(self): ...
    _regex: Any = ...
    _regex_validator: Any = ...
    def _set_regex(self, regex: str) -> None: ...
    regex: Any = ...

class EmailField(CharField):
    widget: Any = ...
    default_validators: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class FileField(Field):
    widget: Any = ...
    default_error_messages: Any = ...
    max_length: Any = ...
    allow_empty_file: Any = ...
    def __init__(self, *, max_length: Optional[Any] = ..., allow_empty_file: bool = ..., **kwargs: Any) -> None: ...
    def to_python(self, data: Optional[Union[str, SimpleUploadedFile]]) -> Optional[SimpleUploadedFile]: ...
    def clean(self, data: Optional[Union[bool, str, SimpleUploadedFile]], initial: Optional[Union[str, FieldFile]] = ...) -> Any: ...
    def bound_data(self, data: Union[str, SimpleUploadedFile], initial: None) -> Union[str, SimpleUploadedFile]: ...
    def has_changed(self, initial: Union[str, FieldFile], data: Optional[str]) -> bool: ...

class ImageField(FileField):
    default_validators: Any = ...
    default_error_messages: Any = ...
    def to_python(self, data: Any): ...
    def widget_attrs(self, widget: ClearableFileInput) -> Dict[str, str]: ...

class URLField(CharField):
    widget: Any = ...
    default_error_messages: Any = ...
    default_validators: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def to_python(self, value: Optional[Union[str, int]]) -> Optional[str]: ...

class BooleanField(Field):
    widget: Any = ...
    def to_python(self, value: Optional[Union[str, int]]) -> bool: ...
    def validate(self, value: bool) -> None: ...
    def has_changed(self, initial: Optional[bool], data: Optional[Union[bool, str]]) -> bool: ...

class NullBooleanField(BooleanField):
    widget: Any = ...
    def to_python(self, value: Optional[Union[str, bool]]) -> Optional[bool]: ...
    def validate(self, value: Optional[bool]) -> None: ...

class CallableChoiceIterator:
    choices_func: Any = ...
    def __init__(self, choices_func: Callable) -> None: ...
    def __iter__(self) -> None: ...

class ChoiceField(Field):
    widget: Any = ...
    default_error_messages: Any = ...
    choices: Any = ...
    def __init__(self, *, choices: Any = ..., **kwargs: Any) -> None: ...
    def __deepcopy__(self, memo: Dict[int, Any]) -> ChoiceField: ...
    def _get_choices(self) -> Any: ...
    _choices: Any = ...
    def _set_choices(self, value: Any) -> None: ...
    def to_python(self, value: Optional[str]) -> str: ...
    def validate(self, value: str) -> None: ...
    def valid_value(self, value: str) -> bool: ...

class TypedChoiceField(ChoiceField):
    coerce: Any = ...
    empty_value: Any = ...
    def __init__(self, *, coerce: Any = ..., empty_value: str = ..., **kwargs: Any) -> None: ...
    def _coerce(self, value: Optional[Union[str, int]]) -> Optional[Union[str, int]]: ...
    def clean(self, value: Optional[str]) -> Optional[Union[str, int]]: ...

class MultipleChoiceField(ChoiceField):
    hidden_widget: Any = ...
    widget: Any = ...
    default_error_messages: Any = ...
    def to_python(self, value: Optional[Union[str, List[str], Tuple]]) -> List[str]: ...
    def validate(self, value: List[str]) -> None: ...
    def has_changed(self, initial: Optional[Union[str, List[int]]], data: Union[str, List[str]]) -> bool: ...

class TypedMultipleChoiceField(MultipleChoiceField):
    coerce: Any = ...
    empty_value: Any = ...
    def __init__(self, *, coerce: Any = ..., **kwargs: Any) -> None: ...
    def _coerce(self, value: List[str]) -> Optional[Union[List[Decimal], List[int]]]: ...
    def clean(self, value: List[str]) -> Optional[Union[List[int], List[bool]]]: ...
    def validate(self, value: List[str]) -> None: ...

class ComboField(Field):
    fields: Any = ...
    def __init__(self, fields: List[CharField], **kwargs: Any) -> None: ...
    def clean(self, value: Optional[str]) -> str: ...

class MultiValueField(Field):
    default_error_messages: Any = ...
    require_all_fields: Any = ...
    fields: Any = ...
    def __init__(self, fields: Union[Tuple[CharField, MultipleChoiceField, SplitDateTimeField], Tuple[DateField, TimeField], Tuple[CharField, CharField]], *, require_all_fields: bool = ..., **kwargs: Any) -> None: ...
    def __deepcopy__(self, memo: Dict[int, Any]) -> MultiValueField: ...
    def validate(self, value: Union[str, datetime]) -> None: ...
    def clean(self, value: Union[str, List[str], List[Union[str, List[str]]]]) -> Optional[Union[str, datetime]]: ...
    def compress(self, data_list: Any) -> None: ...
    def has_changed(self, initial: Optional[Union[datetime, List[None], List[str]]], data: Union[List[None], List[str]]) -> bool: ...

class FilePathField(ChoiceField):
    choices: Any = ...
    match_re: Any = ...
    def __init__(self, path: str, *, match: Optional[Any] = ..., recursive: bool = ..., allow_files: bool = ..., allow_folders: bool = ..., **kwargs: Any) -> None: ...

class SplitDateTimeField(MultiValueField):
    widget: Any = ...
    hidden_widget: Any = ...
    default_error_messages: Any = ...
    def __init__(self, *, input_date_formats: Optional[Any] = ..., input_time_formats: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def compress(self, data_list: List[Union[date, time]]) -> Optional[datetime]: ...

class GenericIPAddressField(CharField):
    unpack_ipv4: Any = ...
    default_validators: Any = ...
    def __init__(self, *, protocol: str = ..., unpack_ipv4: bool = ..., **kwargs: Any) -> None: ...
    def to_python(self, value: str) -> str: ...

class SlugField(CharField):
    default_validators: Any = ...
    allow_unicode: Any = ...
    def __init__(self, *, allow_unicode: bool = ..., **kwargs: Any) -> None: ...

class UUIDField(CharField):
    default_error_messages: Any = ...
    def prepare_value(self, value: Any): ...
    def to_python(self, value: Any): ...
