from collections import UserList
from datetime import datetime
from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union

from django.core.exceptions import ValidationError
from django.utils.safestring import SafeText


def pretty_name(name: str) -> str: ...
def flatatt(
    attrs: Union[Dict[str, None], Dict[str, Union[bool, str]]]
) -> SafeText: ...

class ErrorDict(dict):
    def as_data(self) -> Dict[str, List[ValidationError]]: ...
    def get_json_data(
        self, escape_html: bool = ...
    ) -> Dict[str, List[Dict[str, str]]]: ...
    def as_json(self, escape_html: bool = ...) -> str: ...
    def as_ul(self) -> str: ...
    def as_text(self) -> str: ...

class ErrorList(UserList, list):
    data: List[Union[django.core.exceptions.ValidationError, str]]
    error_class: str = ...
    def __init__(
        self,
        initlist: Optional[Union[List[ValidationError], List[str]]] = ...,
        error_class: Optional[str] = ...,
    ) -> None: ...
    def as_data(self) -> List[ValidationError]: ...
    def get_json_data(
        self, escape_html: bool = ...
    ) -> List[Dict[str, str]]: ...
    def as_json(self, escape_html: bool = ...) -> str: ...
    def as_ul(self) -> str: ...
    def as_text(self) -> str: ...
    def __contains__(self, item: str) -> bool: ...
    def __eq__(self, other: List[str]) -> bool: ...
    def __getitem__(self, i: Union[int, str]) -> str: ...
    def __reduce_ex__(
        self, *args: Any, **kwargs: Any
    ) -> Tuple[
        Callable,
        Tuple[Type[ErrorList]],
        Dict[str, Union[List[ValidationError], str]],
        None,
        None,
    ]: ...

def from_current_timezone(value: datetime) -> datetime: ...
def to_current_timezone(value: datetime) -> datetime: ...
