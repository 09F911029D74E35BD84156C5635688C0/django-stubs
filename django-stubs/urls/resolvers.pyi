# Stubs for django.urls.resolvers (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .converters import get_converter
from .exceptions import NoReverseMatch, Resolver404
from .utils import get_callable
from typing import Any, Optional

from django.core.checks.messages import Error, Warning
from django.utils.datastructures import MultiValueDict
from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union

class ResolverMatch:
    func: Any = ...
    args: Any = ...
    kwargs: Any = ...
    url_name: Any = ...
    app_names: Any = ...
    app_name: Any = ...
    namespaces: Any = ...
    namespace: Any = ...
    _func_path: Any = ...
    view_name: Any = ...
    def __init__(
        self,
        func: Callable,
        args: Tuple,
        kwargs: Dict[str, Any],
        url_name: Optional[str] = ...,
        app_names: Optional[Union[List[None], List[str], List[Union[None, str]]]] = ...,
        namespaces: Optional[Union[List[None], List[str], List[Union[None, str]]]] = ...,
    ) -> None: ...
    def __getitem__(self, index: int) -> Any: ...
    def __repr__(self) -> str: ...

def get_resolver(urlconf: Optional[Union[str, Type[object]]] = ...) -> URLResolver: ...
def get_ns_resolver(
    ns_pattern: str, resolver: URLResolver, converters: Tuple
) -> URLResolver: ...

class LocaleRegexDescriptor:
    attr: Any = ...
    def __init__(self, attr: Any) -> None: ...
    def __get__(self, instance: Any, cls: Optional[Any] = ...): ...

class CheckURLMixin:
    def describe(self) -> str: ...
    def _check_pattern_startswith_slash(self) -> List[Any]: ...

class RegexPattern(CheckURLMixin):
    regex: Any = ...
    _regex: Any = ...
    _regex_dict: Any = ...
    _is_endpoint: Any = ...
    name: Any = ...
    converters: Any = ...
    def __init__(
        self, regex: str, name: Optional[str] = ..., is_endpoint: bool = ...
    ) -> None: ...
    def match(self, path: str) -> Any: ...
    def check(self) -> List[Any]: ...
    def _check_include_trailing_dollar(self) -> List[Any]: ...
    def _compile(self, regex: str): ...
    def __str__(self) -> str: ...

_PATH_PARAMETER_COMPONENT_RE: Any

def _route_to_regex(route: str, is_endpoint: bool = ...) -> Any: ...

class RoutePattern(CheckURLMixin):
    regex: Any = ...
    _route: Any = ...
    _regex_dict: Any = ...
    _is_endpoint: Any = ...
    name: Any = ...
    converters: Any = ...
    def __init__(
        self, route: str, name: Optional[str] = ..., is_endpoint: bool = ...
    ) -> None: ...
    def match(self, path: str) -> Any: ...
    def check(self) -> List[Warning]: ...
    def _compile(self, route: Any): ...
    def __str__(self) -> str: ...

class LocalePrefixPattern:
    prefix_default_language: Any = ...
    converters: Any = ...
    def __init__(self, prefix_default_language: bool = ...) -> None: ...
    @property
    def regex(self): ...
    @property
    def language_prefix(self) -> str: ...
    def match(self, path: str) -> Optional[Tuple[str, Tuple, Dict[Any, Any]]]: ...
    def check(self): ...
    def describe(self) -> str: ...
    def __str__(self) -> str: ...

class URLPattern:
    pattern: Any = ...
    callback: Any = ...
    default_args: Any = ...
    name: Any = ...
    def __init__(
        self,
        pattern: CheckURLMixin,
        callback: Callable,
        default_args: Any = ...,
        name: Optional[str] = ...,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def check(self) -> List[Warning]: ...
    def _check_pattern_name(self) -> List[Any]: ...
    def resolve(self, path: str) -> Optional[ResolverMatch]: ...
    def lookup_str(self) -> str: ...

class URLResolver:
    pattern: Any = ...
    urlconf_name: Any = ...
    callback: Any = ...
    default_kwargs: Any = ...
    namespace: Any = ...
    app_name: Any = ...
    _reverse_dict: Any = ...
    _namespace_dict: Any = ...
    _app_dict: Any = ...
    _callback_strs: Any = ...
    _populated: bool = ...
    _local: Any = ...
    def __init__(
        self,
        pattern: Union[LocalePrefixPattern, CheckURLMixin],
        urlconf_name: Any,
        default_kwargs: None = ...,
        app_name: Optional[str] = ...,
        namespace: Optional[str] = ...,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def check(self) -> Union[List[Warning], List[Error]]: ...
    def _populate(self) -> None: ...
    @property
    def reverse_dict(self) -> MultiValueDict: ...
    @property
    def namespace_dict(self) -> Dict[str, Tuple[str, URLResolver]]: ...
    @property
    def app_dict(self) -> Dict[str, List[str]]: ...
    def _is_callback(self, name: str) -> bool: ...
    def resolve(self, path: str) -> ResolverMatch: ...
    def urlconf_module(self) -> Any: ...
    def url_patterns(
        self
    ) -> Union[
        List[Union[URLPattern, URLResolver]],
        List[URLResolver],
        List[Tuple[str, Callable]],
        List[URLPattern],
    ]: ...
    def resolve_error_handler(self, view_type: int) -> Tuple[Callable, Dict[Any, Any]]: ...
    def reverse(self, lookup_view: str, *args: Any, **kwargs: Any) -> str: ...
    def _reverse_with_prefix(
        self, lookup_view: Optional[str], _prefix: str, *args: Any, **kwargs: Any
    ) -> str: ...
