# Stubs for django.core.files.uploadedfile (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.core.files.base import File
from typing import Any, Optional

from io import BytesIO, StringIO
from tempfile import _TemporaryFileWrapper
from typing import Iterator, Optional, Union

class UploadedFile(File):
    size: Any = ...
    content_type: Any = ...
    charset: Any = ...
    content_type_extra: Any = ...
    def __init__(
        self,
        file: Optional[Union[StringIO, _TemporaryFileWrapper, BytesIO]] = ...,
        name: str = ...,
        content_type: str = ...,
        size: Optional[int] = ...,
        charset: Optional[str] = ...,
        content_type_extra: None = ...,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def _get_name(self) -> str: ...
    _name: Any = ...
    def _set_name(self, name: str) -> None: ...
    name: Any = ...

class TemporaryUploadedFile(UploadedFile):
    def __init__(
        self,
        name: str,
        content_type: str,
        size: int,
        charset: str,
        content_type_extra: None = ...,
    ) -> None: ...
    def temporary_file_path(self) -> str: ...
    def close(self) -> None: ...

class InMemoryUploadedFile(UploadedFile):
    field_name: Any = ...
    def __init__(
        self,
        file: Union[StringIO, BytesIO],
        field_name: Optional[str],
        name: str,
        content_type: str,
        size: int,
        charset: Optional[str],
        content_type_extra: None = ...,
    ) -> None: ...
    def open(self, mode: None = ...) -> InMemoryUploadedFile: ...
    def chunks(self, chunk_size: None = ...) -> Iterator[Union[str, bytes]]: ...
    def multiple_chunks(self, chunk_size: Optional[Any] = ...): ...

class SimpleUploadedFile(InMemoryUploadedFile):
    def __init__(
        self, name: str, content: Optional[bytes], content_type: str = ...
    ) -> None: ...
    @classmethod
    def from_dict(cls, file_dict: Any): ...
