# Stubs for django.core.cache.backends.filebased (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.core.cache.backends.base import BaseCache
from typing import Any, Optional

from io import BufferedRandom, BufferedReader, BufferedWriter
from typing import Any, Callable, Dict, List, Optional, Union
def _write_content(f: Union[BufferedRandom, BufferedWriter], expiry: float, value: object) -> None: ...

class FileBasedCache(BaseCache):
    cache_suffix: str = ...
    _dir: Any = ...
    def __init__(self, dir: str, params: Dict[str, Union[Callable, int]]) -> None: ...
    def add(self, key: str, value: Union[str, bytes, int], timeout: object = ..., version: Optional[int] = ...) -> bool: ...
    def get(self, key: str, default: Optional[Union[str, int]] = ..., version: Optional[int] = ...) -> Optional[str]: ...
    def set(self, key: str, value: Any, timeout: object = ..., version: Optional[int] = ...) -> None: ...
    def touch(self, key: str, timeout: object = ..., version: None = ...): ...
    def delete(self, key: str, version: Optional[int] = ...) -> None: ...
    def _delete(self, fname: str) -> None: ...
    def has_key(self, key: str, version: Optional[int] = ...) -> bool: ...
    def _cull(self) -> None: ...
    def _createdir(self) -> None: ...
    def _key_to_file(self, key: str, version: Optional[int] = ...) -> str: ...
    def clear(self) -> None: ...
    def _is_expired(self, f: BufferedReader) -> bool: ...
    def _list_cache_files(self) -> List[str]: ...
