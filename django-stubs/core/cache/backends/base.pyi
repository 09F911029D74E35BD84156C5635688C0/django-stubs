# Stubs for django.core.cache.backends.base (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from django.core.exceptions import ImproperlyConfigured
from typing import Any, Optional

from collections import OrderedDict
from typing import Any, Callable, Dict, List, Optional, Union
class InvalidCacheBackendError(ImproperlyConfigured): ...
class CacheKeyWarning(RuntimeWarning): ...

DEFAULT_TIMEOUT: Any
MEMCACHE_MAX_KEY_LENGTH: int

def default_key_func(key: Union[str, int], key_prefix: str, version: Union[str, int]) -> str: ...
def get_key_func(key_func: Optional[Union[str, Callable]]) -> Callable: ...

class BaseCache:
    default_timeout: Any = ...
    _max_entries: Any = ...
    _cull_frequency: Any = ...
    key_prefix: Any = ...
    version: Any = ...
    key_func: Any = ...
    def __init__(self, params: Dict[str, Any]) -> None: ...
    def get_backend_timeout(self, timeout: object = ...) -> Optional[float]: ...
    def make_key(self, key: Union[str, int], version: Optional[Union[str, int]] = ...) -> str: ...
    def add(self, key: Any, value: Any, timeout: Any = ..., version: Optional[Any] = ...) -> None: ...
    def get(self, key: Any, default: Optional[Any] = ..., version: Optional[Any] = ...) -> None: ...
    def set(self, key: Any, value: Any, timeout: Any = ..., version: Optional[Any] = ...) -> None: ...
    def touch(self, key: Any, timeout: Any = ..., version: Optional[Any] = ...) -> None: ...
    def delete(self, key: Any, version: Optional[Any] = ...) -> None: ...
    def get_many(self, keys: List[str], version: Optional[int] = ...) -> Dict[str, Union[str, int]]: ...
    def get_or_set(self, key: str, default: Optional[Union[str, int, Callable]], timeout: object = ..., version: Optional[int] = ...) -> Optional[Union[str, int]]: ...
    def has_key(self, key: Any, version: Optional[Any] = ...): ...
    def incr(self, key: str, delta: int = ..., version: Optional[int] = ...) -> int: ...
    def decr(self, key: str, delta: int = ..., version: Optional[int] = ...) -> int: ...
    def __contains__(self, key: str) -> bool: ...
    def set_many(self, data: Union[Dict[str, Union[Dict[str, int], str]], OrderedDict, Dict[str, str], Dict[str, int]], timeout: object = ..., version: Optional[int] = ...) -> List[Any]: ...
    def delete_many(self, keys: List[str], version: None = ...) -> None: ...
    def clear(self) -> None: ...
    def validate_key(self, key: str) -> None: ...
    def incr_version(self, key: str, delta: int = ..., version: Optional[int] = ...) -> int: ...
    def decr_version(self, key: str, delta: int = ..., version: Optional[int] = ...) -> int: ...
    def close(self, **kwargs: Any) -> None: ...
