# Stubs for django.core.serializers.base (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

from io import BufferedReader, StringIO, TextIOWrapper
from collections import OrderedDict
from django.core.exceptions import ValidationError
from django.core.serializers.xml_serializer import Deserializer
from django.db.models.base import Model
from django.db.models.fields.related import ForeignKey, ManyToManyField
from django.db.models.query import QuerySet
from typing import Any, Dict, List, Optional, Type, Union
from uuid import UUID
class SerializerDoesNotExist(KeyError): ...
class SerializationError(Exception): ...

class DeserializationError(Exception):
    @classmethod
    def WithData(cls, original_exc: ValidationError, model: str, fk: str, field_value: None) -> DeserializationError: ...

class M2MDeserializationError(Exception):
    original_exc: Any = ...
    pk: Any = ...
    def __init__(self, original_exc: ValidationError, pk: str) -> None: ...

class ProgressBar:
    progress_width: int = ...
    output: Any = ...
    total_count: Any = ...
    prev_done: int = ...
    def __init__(self, output: Optional[StringIO], total_count: int) -> None: ...
    def update(self, count: int) -> None: ...

class Serializer:
    internal_use_only: bool = ...
    progress_class: Any = ...
    stream_class: Any = ...
    options: Any = ...
    stream: Any = ...
    selected_fields: Any = ...
    use_natural_foreign_keys: Any = ...
    use_natural_primary_keys: Any = ...
    first: bool = ...
    def serialize(self, queryset: Union[List[Model], QuerySet], *, stream: Optional[Any] = ..., fields: Optional[Any] = ..., use_natural_foreign_keys: bool = ..., use_natural_primary_keys: bool = ..., progress_output: Optional[Any] = ..., object_count: int = ..., **options: Any) -> Optional[Union[str, List[OrderedDict]]]: ...
    def start_serialization(self) -> None: ...
    def end_serialization(self) -> None: ...
    def start_object(self, obj: Any) -> None: ...
    def end_object(self, obj: Any) -> None: ...
    def handle_field(self, obj: Any, field: Any) -> None: ...
    def handle_fk_field(self, obj: Any, field: Any) -> None: ...
    def handle_m2m_field(self, obj: Any, field: Any) -> None: ...
    def getvalue(self) -> Optional[str]: ...

class Deserializer:
    options: Any = ...
    stream: Any = ...
    def __init__(self, stream_or_string: Union[str, TextIOWrapper, BufferedReader], **options: Any) -> None: ...
    def __iter__(self) -> Deserializer: ...
    def __next__(self) -> None: ...

class DeserializedObject:
    object: Any = ...
    m2m_data: Any = ...
    def __init__(self, obj: Model, m2m_data: Dict[str, List[int]] = ...) -> None: ...
    def __repr__(self) -> str: ...
    def save(self, save_m2m: bool = ..., using: Optional[str] = ..., **kwargs: Any) -> None: ...

def build_instance(Model: Type[Model], data: Dict[str, Any], db: str) -> Model: ...
def deserialize_m2m_values(field: ManyToManyField, field_value: Union[List[List[str]], List[int], List[Union[int, str]]], using: str) -> List[int]: ...
def deserialize_fk_value(field: ForeignKey, field_value: Any, using: str) -> Optional[Union[str, UUID, int]]: ...
