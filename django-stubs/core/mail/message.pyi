# Stubs for django.core.mail.message (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from email.mime.message import MIMEMessage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from typing import Any, Optional

from django.core.mail.backends.base import BaseEmailBackend
from email.mime.base import MIMEBase
from typing import Dict, List, Optional, Tuple, Union
utf8_charset: Any
utf8_charset_qp: Any
DEFAULT_ATTACHMENT_MIME_TYPE: str
RFC5322_EMAIL_LINE_LENGTH_LIMIT: int

class BadHeaderError(ValueError): ...

ADDRESS_HEADERS: Any

def forbid_multi_line_headers(name: str, val: str, encoding: str) -> Tuple[str, str]: ...
def split_addr(addr: str, encoding: str) -> Tuple[str, str]: ...
def sanitize_address(addr: Union[str, Tuple[str, str]], encoding: str) -> str: ...

class MIMEMixin:
    def as_string(self, unixfrom: bool = ..., linesep: str = ...) -> str: ...
    def as_bytes(self, unixfrom: bool = ..., linesep: str = ...) -> bytes: ...

class SafeMIMEMessage(MIMEMixin, MIMEMessage):
    def __setitem__(self, name: str, val: str) -> None: ...

class SafeMIMEText(MIMEMixin, MIMEText):
    encoding: Any = ...
    def __init__(self, _text: str, _subtype: str = ..., _charset: str = ...) -> None: ...
    def __setitem__(self, name: str, val: str) -> None: ...
    def set_payload(self, payload: str, charset: str = ...) -> None: ...

class SafeMIMEMultipart(MIMEMixin, MIMEMultipart):
    encoding: Any = ...
    def __init__(self, _subtype: str = ..., boundary: None = ..., _subparts: None = ..., encoding: str = ..., **_params: Any) -> None: ...
    def __setitem__(self, name: str, val: str) -> None: ...

class EmailMessage:
    content_subtype: str = ...
    mixed_subtype: str = ...
    encoding: Any = ...
    to: Any = ...
    cc: Any = ...
    bcc: Any = ...
    reply_to: Any = ...
    from_email: Any = ...
    subject: Any = ...
    body: Any = ...
    attachments: Any = ...
    extra_headers: Any = ...
    connection: Any = ...
    def __init__(self, subject: str = ..., body: str = ..., from_email: Optional[str] = ..., to: Optional[List[str]] = ..., bcc: None = ..., connection: Optional[BaseEmailBackend] = ..., attachments: Optional[List[MIMEText]] = ..., headers: Optional[Dict[str, str]] = ..., cc: Optional[List[str]] = ..., reply_to: Optional[List[str]] = ...) -> None: ...
    def get_connection(self, fail_silently: bool = ...) -> BaseEmailBackend: ...
    def message(self) -> Union[SafeMIMEMultipart, SafeMIMEText]: ...
    def recipients(self) -> List[str]: ...
    def send(self, fail_silently: bool = ...) -> int: ...
    def attach(self, filename: str = ..., content: bytes = ..., mimetype: Optional[str] = ...) -> None: ...
    def attach_file(self, path: str, mimetype: Optional[str] = ...) -> None: ...
    def _create_message(self, msg: SafeMIMEText) -> Union[SafeMIMEMultipart, SafeMIMEText]: ...
    def _create_attachments(self, msg: Union[SafeMIMEMultipart, SafeMIMEText]) -> Union[SafeMIMEMultipart, SafeMIMEText]: ...
    def _create_mime_attachment(self, content: Union[str, bytes], mimetype: str) -> MIMEBase: ...
    def _create_attachment(self, filename: Optional[str], content: Union[bytes, str, SafeMIMEText], mimetype: str = ...) -> MIMEBase: ...
    def _set_list_header_if_not_empty(self, msg: Union[SafeMIMEMultipart, SafeMIMEText], header: str, values: List[str]) -> None: ...

class EmailMultiAlternatives(EmailMessage):
    alternative_subtype: str = ...
    alternatives: Any = ...
    def __init__(self, subject: str = ..., body: str = ..., from_email: Optional[str] = ..., to: List[str] = ..., bcc: None = ..., connection: Optional[BaseEmailBackend] = ..., attachments: None = ..., headers: Optional[Dict[str, str]] = ..., alternatives: None = ..., cc: None = ..., reply_to: None = ...) -> None: ...
    def attach_alternative(self, content: str, mimetype: str) -> None: ...
    def _create_message(self, msg: SafeMIMEText) -> Union[SafeMIMEMultipart, SafeMIMEText]: ...
    def _create_alternatives(self, msg: SafeMIMEText) -> Union[SafeMIMEMultipart, SafeMIMEText]: ...
