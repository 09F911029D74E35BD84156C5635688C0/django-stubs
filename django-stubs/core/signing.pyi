from datetime import datetime
from typing import Any, Dict, List, Optional, Type, Union

from django.contrib.sessions.serializers import PickleSerializer


class BadSignature(Exception): ...
class SignatureExpired(BadSignature): ...

def b64_encode(s: bytes) -> bytes: ...
def b64_decode(s: bytes) -> bytes: ...
def base64_hmac(
    salt: str, value: Union[str, bytes], key: Union[str, bytes]
) -> str: ...
def get_cookie_signer(salt: str = ...) -> TimestampSigner: ...

class JSONSerializer:
    def dumps(
        self, obj: Union[Dict[str, Union[str, int]], str, List[str]]
    ) -> bytes: ...
    def loads(self, data: bytes) -> Dict[str, Union[str, int]]: ...

def dumps(
    obj: Union[Dict[str, Union[str, datetime]], str, List[str]],
    key: None = ...,
    salt: str = ...,
    serializer: Type[Union[JSONSerializer, PickleSerializer]] = ...,
    compress: bool = ...,
) -> str: ...
def loads(
    s: str,
    key: None = ...,
    salt: str = ...,
    serializer: Type[Union[JSONSerializer, PickleSerializer]] = ...,
    max_age: Optional[int] = ...,
) -> Union[
    Dict[str, Union[str, int]], str, Dict[str, Union[str, datetime]], List[str]
]: ...

class Signer:
    key: str = ...
    sep: str = ...
    salt: Any = ...
    def __init__(
        self,
        key: Optional[Union[str, bytes]] = ...,
        sep: str = ...,
        salt: Optional[str] = ...,
    ) -> None: ...
    def signature(self, value: Union[str, bytes]) -> str: ...
    def sign(self, value: str) -> str: ...
    def unsign(self, signed_value: str) -> str: ...

class TimestampSigner(Signer):
    key: str
    salt: str
    sep: str
    def timestamp(self) -> str: ...
    def sign(self, value: str) -> str: ...
    def unsign(self, value: str, max_age: Optional[int] = ...) -> str: ...
