# Stubs for django.core.paginator (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import collections.abc
from typing import Any

from django.db.models.base import Model
from django.db.models.query import QuerySet
from typing import List, Optional, Union

class UnorderedObjectListWarning(RuntimeWarning): ...
class InvalidPage(Exception): ...
class PageNotAnInteger(InvalidPage): ...
class EmptyPage(InvalidPage): ...

class Paginator:
    object_list: Any = ...
    per_page: Any = ...
    orphans: Any = ...
    allow_empty_first_page: Any = ...
    def __init__(
        self,
        object_list: Union[List[int], QuerySet, List[object]],
        per_page: Union[str, int],
        orphans: Union[str, int] = ...,
        allow_empty_first_page: bool = ...,
    ) -> None: ...
    def validate_number(self, number: Optional[Union[float, str]]) -> int: ...
    def get_page(self, number: Optional[int]) -> Page: ...
    def page(self, number: Union[str, int]) -> Page: ...
    def _get_page(self, *args: Any, **kwargs: Any) -> Page: ...
    def count(self) -> int: ...
    def num_pages(self) -> int: ...
    @property
    def page_range(self) -> range: ...
    def _check_object_list_is_ordered(self) -> None: ...

QuerySetPaginator = Paginator

class Page(collections.abc.Sequence):
    object_list: Any = ...
    number: Any = ...
    paginator: Any = ...
    def __init__(
        self,
        object_list: Union[List[int], str, List[object], QuerySet],
        number: int,
        paginator: Paginator,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __len__(self): ...
    def __getitem__(self, index: Union[slice, int]) -> Union[List[Model], str]: ...
    def has_next(self) -> bool: ...
    def has_previous(self) -> bool: ...
    def has_other_pages(self) -> bool: ...
    def next_page_number(self) -> int: ...
    def previous_page_number(self) -> int: ...
    def start_index(self) -> int: ...
    def end_index(self) -> int: ...
