[CASE arguments_to_init_unexpected_attributes]
from django.db import models

class MyUser(models.Model):
    pass
user = MyUser(name=1, age=12)
[out]
main:5: error: Unexpected attribute "name" for model "MyUser"
main:5: error: Unexpected attribute "age" for model "MyUser"

[CASE arguments_to_init_from_class_incompatible_type]
from django.db import models

class MyUser(models.Model):
    name = models.CharField(max_length=100)
    age = models.IntegerField()
user = MyUser(name='hello', age='world')
[out]
main:6: error: Incompatible type for "age" of "MyUser" (got "str", expected "Union[int, Combinable, Literal['']]")

[CASE arguments_to_init_combined_from_base_classes]
from django.db import models

class BaseUser(models.Model):
    name = models.CharField(max_length=100)
    age = models.IntegerField()
class ChildUser(BaseUser):
    lastname = models.CharField(max_length=100)
user = ChildUser(name='Max', age=12, lastname='Lastname')
[out]

[CASE fields_from_abstract_user_propagate_to_init]
from django.contrib.auth.models import AbstractUser

class MyUser(AbstractUser):
    pass
user = MyUser(username='maxim', password='password', first_name='Max', last_name='MaxMax')
[out]

[CASE generic_foreign_key_field_no_typechecking]
from django.db import models
from django.contrib.contenttypes.fields import GenericForeignKey

class MyUser(models.Model):
    content_object = GenericForeignKey()

user = MyUser(content_object=1)
[out]

[CASE pk_refers_to_primary_key_and_could_be_passed_to_init]
from django.db import models

class MyUser1(models.Model):
    mypk = models.CharField(primary_key=True)
class MyUser2(models.Model):
    name = models.CharField(max_length=100)
user2 = MyUser1(pk='hello')
user3= MyUser2(pk=1)
[out]

[CASE typechecking_of_pk]
from django.db import models

class MyUser1(models.Model):
    mypk = models.IntegerField(primary_key=True)
user = MyUser1(pk='hello')  # E: Incompatible type for "pk" of "MyUser1" (got "str", expected "Union[int, Combinable, Literal['']]")
[out]

[CASE can_set_foreign_key_by_its_primary_key]
from django.db import models

class Publisher(models.Model):
    pass
class PublisherDatetime(models.Model):
    dt_pk = models.DateTimeField(primary_key=True)
class Book(models.Model):
    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
    publisher_dt = models.ForeignKey(PublisherDatetime, on_delete=models.CASCADE)

Book(publisher_id=1)
Book(publisher_id=[])  # E: Incompatible type for "publisher_id" of "Book" (got "List[Any]", expected "Union[Combinable, int, str]")
Book(publisher_dt_id=11)  # E: Incompatible type for "publisher_dt_id" of "Book" (got "int", expected "Union[str, date, datetime, Combinable]")
[out]

[CASE setting_value_to_an_array_of_ints]
from typing import List, Tuple

from django.db import models
from django.contrib.postgres.fields import ArrayField

class MyModel(models.Model):
    array = ArrayField(base_field=models.IntegerField())
array_val: Tuple[int, ...] = (1,)
MyModel(array=array_val)
array_val2: List[int] = [1]
MyModel(array=array_val2)
array_val3: List[str] = ['hello']
MyModel(array=array_val3)  # E: Incompatible type for "array" of "MyModel" (got "List[str]", expected "Union[Sequence[int], Combinable]")
[out]

[CASE if_no_explicit_primary_key_id_can_be_passed]
from django.db import models

class MyModel(models.Model):
    name = models.CharField(max_length=100)
MyModel(id=1, name='maxim')
[out]

[CASE arguments_can_be_passed_as_positionals]
from django.db import models
class MyModel(models.Model):
    pass
MyModel(1)

class MyModel2(models.Model):
    name = models.IntegerField()
MyModel2(1, 12)
MyModel2(1, 'Maxim')  # E: Incompatible type for "name" of "MyModel2" (got "str", expected "Union[int, Combinable, Literal['']]")
[out]

[CASE arguments_passed_as_dictionary_unpacking_are_not_supported]
from django.db import models
class MyModel(models.Model):
    name = models.CharField(max_length=100)
MyModel(**{'name': 'hello'})
[out]

[CASE pointer_to_parent_model_is_not_supported]
from django.db import models
class Place(models.Model):
    pass
class Restaurant(Place):
    pass
place = Place()
Restaurant(place_ptr=place)
Restaurant(place_ptr_id=place.id)
[out]

[CASE charfield_with_integer_choices]
from django.db import models
class MyModel(models.Model):
    day = models.CharField(max_length=3, choices=((1, 'Fri'), (2, 'Sat')))
MyModel(day=1)
[out]

[CASE if_there_is_no_data_for_base_classes_of_fields_and_ignore_unresolved_attributes_set_to_true_to_not_fail]
from decimal import Decimal
from django.db import models
from fields2 import MoneyField

class InvoiceRow(models.Model):
    base_amount = MoneyField(max_digits=10, decimal_places=2)
    vat_rate = models.DecimalField(max_digits=10, decimal_places=2)
InvoiceRow(1, Decimal(0), Decimal(0))
InvoiceRow(base_amount=Decimal(0), vat_rate=Decimal(0))
InvoiceRow.objects.create(base_amount=Decimal(0), vat_rate=Decimal(0))
[out]
main:3: error: Cannot find module named 'fields2'
main:3: note: See https://mypy.readthedocs.io/en/latest/running_mypy.html#missing-imports

